#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE, na.rm = TRUE)
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE, na.rm = T)
#splitting data into training/testing data using the trainIndex object
train <- data[trainIndex,] #training data (75% of data)
test <- data[-trainIndex,] #testing data (25% of data)
unique(modeldata$PredPoints)
x<-modeldata[,.(DKpoints,Predpoint)]
x<-modeldata[,.(DKpoints,PredPoints)]
y_train<-modeldata$DKSalary
y_train<-modeldata$DKsalary
x = as.matrix(x)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
is.null(data$`DK points`)
is.null(data$`DK salary`)
is.null(data$PredPoints)
?is.null
library(Metrics)
library(caret)
library(data.table)
library(glmnet)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
length(modeldata)
nrow(modeldata)
check<-data.table()
i<-1
if (modeldata[is.null(modeldata$PredPoints[i])]) {
check$PredPointsNull <- i
}
else (check$PredPointsNull<-FALSE)
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (modeldata[is.null(modeldata$PredPoints[i])]) {
check$PredPointsNull <- i
}
else {check$PredPointsNull<-FALSE}
}
is.null(modeldata$PredPoints[2])
i<-1
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {check$PredPointsNull<-FALSE}
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
View(check)
playerstats[playerstats$Tm == "TAM"]$Tm<-"TB"
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
View(check)
check<-data.table()
for (i in 1:lenght(nrow(modeldata))) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
check<-data.table()
for (i in 1:length(nrow(modeldata))) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
playerstats[playerstats$Tm == "TAM"]$Tm<-"TB"
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
for (i in 1:length(nrow(modeldata))) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
length(nrow(modeldata))
range(nrow(modeldata))
check<-data.table()
for (i in 1:range(nrow(modeldata))) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
for (i in 1:range(nrow(modeldata))) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
View(check)
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
i = i+1
}
View(check)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
i = i+1
}
View(check)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index[i] <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
}
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
}
check<-data.table()
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else{
check$PredNotNull[i] <-1
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
i<-1
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
View(check)
check<-data.table()
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
check<-data.table()
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
i<-1
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
} else {
check$PredPointsNull[i]<-FALSE
}
View(check)
i<-2
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
} else {
check$PredPointsNull[i]<-FALSE
}
is.na(modeldata$PredPoints[2])
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
} else {
check$PredPointsNull[i]<-FALSE
}
final<-rbind(final,check)
}
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
} else {
check$PredPointsNull<-FALSE
}
final<-rbind(final,check)
}
View(final)
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
check$Value <- modeldata$PredPoints[i]
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
} else {
check$PredPointsNull<-FALSE
}
final<-rbind(final,check)
}
View(final)
is.numeric(modeldata$PredPoints[3])
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
check$Value <- modeldata$PredPoints[i]
if (is.numeric(modeldata$PredPoints[i])) {
check$PredPointsNumeric <- i
} else {
check$PredPointsNumeric<-FALSE
}
final<-rbind(final,check)
}
View(check)
unique(final$PredPointsNumeric)
check<-data.table()
PredPointsfinal<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
check$Value <- modeldata$PredPoints[i]
if (is.numeric(modeldata$PredPoints[i])) {
check$PredPointsNumeric <- i
} else {
check$PredPointsNumeric<-FALSE
}
PredPointsfinal<-rbind(PredPointsfinal,check)
}
temp1<-data.table()
Salaryfinal<-NULL
for (i in 1:nrow(modeldata)) {
temp1$Index<-i
temp1$Value <- modeldata$DKsalary[i]
if (is.numeric(modeldata$DKsalary[i])) {
temp1$DKSalaryNumeric <- i
} else {
temp1$DKSalaryNumeric<-FALSE
}
Salaryfinal<-rbind(Salaryfinal,check)
}
View(Salaryfinal)
temp1<-data.table()
Salaryfinal<-NULL
for (i in 1:nrow(modeldata)) {
temp1$Index<-i
temp1$Value <- modeldata$DKsalary[i]
if (is.numeric(modeldata$DKsalary[i])) {
temp1$DKSalaryNumeric <- i
} else {
temp1$DKSalaryNumeric<-FALSE
}
Salaryfinal<-rbind(Salaryfinal,temp1)
}
View(Salaryfinal)
temp2<-data.table()
SalaryNA<-NULL
for (i in 1:nrow(modeldata)) {
temp2$Index<-i
temp2$Value <- modeldata$DKsalary[i]
if (is.na(modeldata$DKsalary[i])) {
temp1$DKSalaryNA <- i
} else {
temp1$DKSalaryNA<-FALSE
}
SalaryNA<-rbind(SalaryNA,temp2)
}
View(SalaryNA)
View(Salaryfinal)
View(SalaryNA)
temp2<-data.table()
SalaryNA<-NULL
for (i in 1:nrow(modeldata)) {
temp2$Index<-i
temp2$Value <- modeldata$DKsalary[i]
if (is.na(modeldata$DKsalary[i])) {
temp1$DKSalaryNA <- i
} else {
temp1$DKSalaryNA<-0
}
SalaryNA<-rbind(SalaryNA,temp2)
}
View(SalaryNA)
temp2<-data.table()
SalaryNA<-NULL
SalaryNA<-NULL
for (i in 1:nrow(modeldata)) {
temp2$Index<-i
temp2$Value <- modeldata$DKsalary[i]
if (is.na(modeldata$DKsalary[i])) {
temp2$DKSalaryNA <- i
} else {
temp2$DKSalaryNA<-0
}
SalaryNA<-rbind(SalaryNA,temp2)
}
View(SalaryNA)
unique(SalaryNA$DKSalaryNA)
Salary<-cbind(Salaryfinal, SalaryNA)
View(Salary)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
library(Metrics)
library(caret)
library(data.table)
library(glmnet)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
modeldata[is.na(modeldata$PredPoints)]$PredPoints<-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints<-0
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE, na.rm = T)
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
train <- data[trainIndex,] #training data (75% of data)
test <- data[-trainIndex,] #testing data (25% of data)
#splitting data into training/testing data using the trainIndex object
train <- modeldata[trainIndex,] #training data (75% of data)
test <- modeldata[-trainIndex,] #testing data (25% of data)
x<-modeldata[,.(DKpoints,PredPoints)]
y_train<-modeldata$DKsalary
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
x<-na.omit(x)
y_train<-na.omit(y_train)
x = as.matrix(x)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
modeldata[is.na(modeldata$PredPoints)]$PredPoints<-0
modeldata[is.na(modeldata$DKsalary)]$DKsalary<-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints<-0
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
train <- modeldata[trainIndex,] #training data (75% of data)
test <- modeldata[-trainIndex,] #testing data (25% of data)
x<-modeldata[,.(DKpoints,PredPoints)]
y_train<-modeldata$DKsalary
x = as.matrix(x)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
modeldata[is.na(modeldata$PredPoints)]$PredPoints<-0
modeldata[is.na(modeldata$DKsalary)]$DKsalary<-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints<-0
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
train <- modeldata[trainIndex,] #training data (75% of data)
test <- modeldata[-trainIndex,] #testing data (25% of data)
x_train<-train[,.(DKpoints,PredPoints)]
y_train<-train$DKsalary
x_train = as.matrix(x_train)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
cv_ridge <- cv.glmnet(x_train, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
#Training
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = optimal_lambda)
#Training
ridge_reg = glmnet(x_train, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = optimal_lambda)
summary(ridge_reg)
predictions = predict(glmnet, newdata = test)
predictions = predict(ridge_reg, newdata = test)
