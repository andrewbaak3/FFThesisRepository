XGB_model<-xgb.train(params=param,nrounds=10000,missing=NA,data=dtrain,watchlist=watchlist,print_every_n=1,nthread=4,
early_stopping_rounds=25)
#Write out hyperparameters so they can be compared
best_ntrees<-unclass(XGB_model)$best_iteration
train_param<-data.table(t(param))
train_param$best_ntrees<-best_ntrees
test_error<-unclass(XGB_model)$evaluation_log[as.numeric(best_ntrees),]$test_rmse
train_param$test_error<-test_error
#fwrite(train_param, "./project/src/models/trainingHyperparametersWR(roll3).csv", append = T)
#fwrite(train_param, "./project/src/models/trainingHyperparametersWR(roll4).csv", append = T)
fwrite(train_param, "./project/src/models/trainingHyperparametersWR(roll5).csv", append = T)
param <- list(  objective           = "reg:linear",
gamma               =0.2,
booster             = "gbtree",
eval_metric         = "rmse",
eta                 = 0.2,
max_depth           = 3,
min_child_weight    = 30,
subsample           = .8,
colsample_bytree    = .8,
tree_method = 'hist'
)
#Add the watchlist
watchlist <- list(train = dtrain, test = dtest)
null_y<-mean(train1_y)
rmse(test_y,null_y)
rollingfantasypoint_y<-test1$Player_roll_4_PPRFantasyPoints/4
rollingfantasypoint_y[is.na(rollingfantasypoint_y)]<-null_y
rmse(test_y, rollingfantasypoint_y)
#Create Predictions
XGB_model<-xgb.train(params=param,nrounds=10000,missing=NA,data=dtrain,watchlist=watchlist,print_every_n=1,nthread=4,
early_stopping_rounds=25)
#Write out hyperparameters so they can be compared
best_ntrees<-unclass(XGB_model)$best_iteration
train_param<-data.table(t(param))
train_param$best_ntrees<-best_ntrees
test_error<-unclass(XGB_model)$evaluation_log[as.numeric(best_ntrees),]$test_rmse
train_param$test_error<-test_error
#fwrite(train_param, "./project/src/models/trainingHyperparametersWR(roll3).csv", append = T)
#fwrite(train_param, "./project/src/models/trainingHyperparametersWR(roll4).csv", append = T)
fwrite(train_param, "./project/src/models/trainingHyperparametersWR(roll5).csv", append = T)
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
player_achieved<-statsandscores
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/playerstats(roll3).csv")) {
file.remove("./project/volume/data/processed/playerstats(roll3).csv")}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL","PPRFantasyPoints","StandardFantasyPoints",
"HalfPPRFantasyPoints")
View(statsandscores)
library(data.table)
library(caret)
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/train(roll3).csv")) {
file.remove("./project/volume/data/processed/train(roll3).csv")}
playerstats<-fread("./project/volume/data/processed/playerstats(roll3).csv")
teamstats<-fread("./project/volume/data/processed/teamstats(roll3).csv")
playerstats<-playerstats[,.(season,week,Tm,Player,Pos,PPRFantasyPoints,game_id,Opponent,roll_3_PassingYds,roll_3_PassingTD,
roll_3_Int,roll_3_PassingAtt,roll_3_Cmp,roll_3_RushingAtt,roll_3_RushingYds,
roll_3_RushingTD,roll_3_Rec,roll_3_Tgt,roll_3_ReceivingYds,roll_3_ReceivingTD,
roll_3_FL,roll_3_PPRFantasyPoints)]
teamstats<-teamstats[,.(season,week,Tm,cumulativeweek,game_id,Opponent,roll_3_PassingYds,roll_3_PassingTD,roll_3_Int,
roll_3_PassingAtt, roll_3_Cmp,roll_3_RushingAtt,roll_3_RushingYds,roll_3_RushingTD,
roll_3_Rec,roll_3_Tgt,roll_3_ReceivingYds,roll_3_ReceivingTD,roll_3_FL)]
setnames(playerstats, c("roll_3_PassingYds","roll_3_PassingTD","roll_3_Int","roll_3_PassingAtt","roll_3_Cmp","roll_3_RushingAtt",
"roll_3_RushingYds","roll_3_RushingTD","roll_3_Rec","roll_3_Tgt","roll_3_ReceivingYds",
"roll_3_ReceivingTD","roll_3_FL","roll_3_PPRFantasyPoints"),
c("Player_roll_3_PassingYds", "Player_roll_3_PassingTD","Player_roll_3_Int","Player_roll_3_PassingAtt",
"Player_roll_3_Cmp","Player_roll_3_RushingAtt","Player_roll_3_RushingYds",
"Player_roll_3_RushingTD","Player_roll_3_Rec","Player_roll_3_Tgt",
"Player_roll_3_ReceivingYds","Player_roll_3_ReceivingTD","Player_roll_3_FL",
"Player_roll_3_PPRFantasyPoints"))
setnames(teamstats, c("roll_3_PassingYds","roll_3_PassingTD","roll_3_Int","roll_3_PassingAtt","roll_3_Cmp","roll_3_RushingAtt",
"roll_3_RushingYds","roll_3_RushingTD","roll_3_Rec","roll_3_Tgt","roll_3_ReceivingYds",
"roll_3_ReceivingTD","roll_3_FL"),
c("TeamAllowed_roll_3_PassingYds", "TeamAllowed_roll_3_PassingTD","TeamAllowed_roll_3_Int","TeamAllowed_roll_3_PassingAtt",
"TeamAllowed_roll_3_Cmp","TeamAllowed_roll_3_RushingAtt","TeamAllowed_roll_3_RushingYds",
"TeamAllowed_roll_3_RushingTD","TeamAllowed_roll_3_Rec","TeamAllowed_roll_3_Tgt",
"TeamAllowed_roll_3_ReceivingYds","TeamAllowed_roll_3_ReceivingTD","TeamAllowed_roll_3_FL"))
#Set Keys and Merge Together PlayerStats and Teamstats to create train set
setkey(playerstats,season,week,Tm,game_id,Opponent)
setkey(teamstats,season,week,Tm,game_id,Opponent)
train<-merge(playerstats,teamstats)
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
player_achieved<-statsandscores
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/playerstats(roll3).csv")) {
file.remove("./project/volume/data/processed/playerstats(roll3).csv")}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL","PPRFantasyPoints","StandardFantasyPoints",
"HalfPPRFantasyPoints")
setkey(player_achieved,Player,cumulativeweek)
for (i in 1:length(NFLvalues)) {
player_achieved[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:3))]
setnames(player_achieved,"new_column",paste0("roll_3_",NFLvalues[i]))
}
fwrite(player_achieved, "project/volume/data/processed/playerstats(roll3).csv")
library(data.table)
library(caret)
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/train(roll3).csv")) {
file.remove("./project/volume/data/processed/train(roll3).csv")}
playerstats<-fread("./project/volume/data/processed/playerstats(roll3).csv")
teamstats<-fread("./project/volume/data/processed/teamstats(roll3).csv")
playerstats<-playerstats[,.(season,week,Tm,Player,Pos,PPRFantasyPoints,game_id,Opponent,roll_3_PassingYds,roll_3_PassingTD,
roll_3_Int,roll_3_PassingAtt,roll_3_Cmp,roll_3_RushingAtt,roll_3_RushingYds,
roll_3_RushingTD,roll_3_Rec,roll_3_Tgt,roll_3_ReceivingYds,roll_3_ReceivingTD,
roll_3_FL,roll_3_PPRFantasyPoints)]
teamstats<-teamstats[,.(season,week,Tm,cumulativeweek,game_id,Opponent,roll_3_PassingYds,roll_3_PassingTD,roll_3_Int,
roll_3_PassingAtt, roll_3_Cmp,roll_3_RushingAtt,roll_3_RushingYds,roll_3_RushingTD,
roll_3_Rec,roll_3_Tgt,roll_3_ReceivingYds,roll_3_ReceivingTD,roll_3_FL)]
setnames(playerstats, c("roll_3_PassingYds","roll_3_PassingTD","roll_3_Int","roll_3_PassingAtt","roll_3_Cmp","roll_3_RushingAtt",
"roll_3_RushingYds","roll_3_RushingTD","roll_3_Rec","roll_3_Tgt","roll_3_ReceivingYds",
"roll_3_ReceivingTD","roll_3_FL","roll_3_PPRFantasyPoints"),
c("Player_roll_3_PassingYds", "Player_roll_3_PassingTD","Player_roll_3_Int","Player_roll_3_PassingAtt",
"Player_roll_3_Cmp","Player_roll_3_RushingAtt","Player_roll_3_RushingYds",
"Player_roll_3_RushingTD","Player_roll_3_Rec","Player_roll_3_Tgt",
"Player_roll_3_ReceivingYds","Player_roll_3_ReceivingTD","Player_roll_3_FL",
"Player_roll_3_PPRFantasyPoints"))
setnames(teamstats, c("roll_3_PassingYds","roll_3_PassingTD","roll_3_Int","roll_3_PassingAtt","roll_3_Cmp","roll_3_RushingAtt",
"roll_3_RushingYds","roll_3_RushingTD","roll_3_Rec","roll_3_Tgt","roll_3_ReceivingYds",
"roll_3_ReceivingTD","roll_3_FL"),
c("TeamAllowed_roll_3_PassingYds", "TeamAllowed_roll_3_PassingTD","TeamAllowed_roll_3_Int","TeamAllowed_roll_3_PassingAtt",
"TeamAllowed_roll_3_Cmp","TeamAllowed_roll_3_RushingAtt","TeamAllowed_roll_3_RushingYds",
"TeamAllowed_roll_3_RushingTD","TeamAllowed_roll_3_Rec","TeamAllowed_roll_3_Tgt",
"TeamAllowed_roll_3_ReceivingYds","TeamAllowed_roll_3_ReceivingTD","TeamAllowed_roll_3_FL"))
#Set Keys and Merge Together PlayerStats and Teamstats to create train set
setkey(playerstats,season,week,Tm,game_id,Opponent)
setkey(teamstats,season,week,Tm,game_id,Opponent)
train<-merge(playerstats,teamstats)
#Calculate difference values for applicable rows
#ReceivingYds
scale_transform<-preProcess(train[,.(Player_roll_3_ReceivingYds,TeamAllowed_roll_3_ReceivingYds)],
method=c("center","scale"))
scaled_receiving_yds<-predict(scale_transform,train[,.(Player_roll_3_ReceivingYds,TeamAllowed_roll_3_ReceivingYds)])
train$ReceivingYds_Dif<-scaled_receiving_yds$Player_roll_3_ReceivingYds-scaled_receiving_yds$TeamAllowed_roll_3_ReceivingYds
#RushingYds
scale_transform2<-preProcess(train[,.(Player_roll_3_RushingYds,TeamAllowed_roll_3_RushingYds)],
method=c("center","scale"))
scaled_rushing_yds<-predict(scale_transform2,train[,.(Player_roll_3_RushingYds,TeamAllowed_roll_3_RushingYds)])
train$RushingYds_Dif<-scaled_rushing_yds$Player_roll_3_RushingYds-scaled_rushing_yds$TeamAllowed_roll_3_RushingYds
#PassingYds
scale_transform3<-preProcess(train[,.(Player_roll_3_PassingYds,TeamAllowed_roll_3_PassingYds)],
method=c("center","scale"))
scaled_passing_yds<-predict(scale_transform3,train[,.(Player_roll_3_PassingYds,TeamAllowed_roll_3_PassingYds)])
train$PassingYds_Dif<-scaled_passing_yds$Player_roll_3_PassingYds-scaled_passing_yds$TeamAllowed_roll_3_PassingYds
#Targets
scale_transform4<-preProcess(train[,.(Player_roll_3_Tgt,TeamAllowed_roll_3_Tgt)],
method=c("center","scale"))
scaled_targets<-predict(scale_transform4,train[,.(Player_roll_3_Tgt,TeamAllowed_roll_3_Tgt)])
train$Targets_Dif<-scaled_targets$Player_roll_3_Tgt-scaled_targets$TeamAllowed_roll_3_Tgt
#PassingAttempts
scale_transform5<-preProcess(train[,.(Player_roll_3_PassingAtt,TeamAllowed_roll_3_PassingAtt)],
method=c("center","scale"))
scaled_passingattempts<-predict(scale_transform5,train[,.(Player_roll_3_PassingAtt,TeamAllowed_roll_3_PassingAtt)])
train$Passing_Attempts_Dif<-scaled_passingattempts$Player_roll_3_PassingAtt-scaled_passingattempts$TeamAllowed_roll_3_PassingAtt
#RushingAttempts
scale_transform6<-preProcess(train[,.(Player_roll_3_RushingAtt,TeamAllowed_roll_3_RushingAtt)],
method=c("center","scale"))
scaled_rushingattempts<-predict(scale_transform6,train[,.(Player_roll_3_RushingAtt,TeamAllowed_roll_3_RushingAtt)])
train$Rushing_Attempts_Dif<-scaled_rushingattempts$Player_roll_3_RushingAtt-scaled_rushingattempts$TeamAllowed_roll_3_RushingAtt
#ReceivingTDs
scale_transform7<-preProcess(train[,.(Player_roll_3_ReceivingTD,TeamAllowed_roll_3_ReceivingTD)],
method=c("center","scale"))
scaled_receivingtds<-predict(scale_transform7,train[,.(Player_roll_3_ReceivingTD,TeamAllowed_roll_3_ReceivingTD)])
train$ReceivingTDs_Dif<-scaled_receivingtds$Player_roll_3_ReceivingTD-scaled_receivingtds$TeamAllowed_roll_3_ReceivingTD
#RushingTDs
scale_transform8<-preProcess(train[,.(Player_roll_3_RushingTD,TeamAllowed_roll_3_RushingTD)],
method=c("center","scale"))
scaled_rushingtds<-predict(scale_transform8,train[,.(Player_roll_3_RushingTD,TeamAllowed_roll_3_RushingTD)])
train$RushingTDs_Dif<-scaled_rushingtds$Player_roll_3_RushingTD-scaled_rushingtds$TeamAllowed_roll_3_RushingTD
#PassingTDs
scale_transform9<-preProcess(train[,.(Player_roll_3_PassingTD,TeamAllowed_roll_3_PassingTD)],
method=c("center","scale"))
scaled_passingtds<-predict(scale_transform9,train[,.(Player_roll_3_PassingTD,TeamAllowed_roll_3_PassingTD)])
train$PassingTDs_Dif<-scaled_passingtds$Player_roll_3_PassingTD-scaled_passingtds$TeamAllowed_roll_3_PassingTD
#Write out train set to processed folder
fwrite(train, "./project/volume/data/processed/train(roll3).csv")
View(train)
library(data.table)
#read in player statistics table
playerstats<-fread("./project/volume/data/interim/gamePlayerstats.csv")
#read in box scores table
boxscores<-fread("./project/volume/data/interim/allBoxscores.csv")
#only concerned with stats from 2009 on as the box scores data starts at 2009
playerstats<-playerstats[season>2008]
#Create home and away team tables
home<-boxscores[,.(game_id,home_team,week,season,home_score)]
setnames(home,c("home_team","home_score"),c("Tm","score"))
away<-boxscores[,.(game_id,away_team,week,season,away_score)]
setnames(away,c("away_team","away_score"),c("Tm","score"))
#Rbind home and away to create allboxscores
allboxscores<-rbind(home,away)
allboxscores<-merge(allboxscores,allboxscores,by=c("game_id","week","season"),allow.cartesian = T)
setnames(allboxscores,c("Tm.x","score.x","Tm.y","score.y"), c("Tm","Tmscore","Opponent","Opponentscore"))
allboxscores<-allboxscores[!Tm==Opponent]
#Fix situations where Team name (Tm) is different from one table to the next
playerstats[playerstats$Tm == "NOR"]$Tm<-"NO"
playerstats[playerstats$Tm == "KAN"]$Tm<-"KC"
playerstats[playerstats$Tm == "NWE"]$Tm<-"NE"
playerstats[playerstats$Tm == "GNB"]$Tm<-"GB"
playerstats[playerstats$Tm == "SFO"]$Tm<-"SF"
playerstats[playerstats$Tm == "TAM"]$Tm<-"TB"
playerstats[playerstats$Tm == "SDG"]$Tm<-"SD"
playerstats[playerstats$Tm == "LAR"]$Tm<-"LA"
allboxscores[allboxscores$Tm=="JAC"]$Tm<-"JAX"
#Set keys for each table so merge can occur
setkey(playerstats,week,season,Tm)
setkey(allboxscores,week,season,Tm)
scoresandstats<-merge(playerstats,allboxscores, all.x = T)
scoresandstats<-scoresandstats[order(season,week)]
#Create separate table with just team, week, and c_week to calculate the correct cumulative week
DT<- scoresandstats[,.(season,week,c_week)]
DT<-DT[!duplicated(DT)]
DT<-DT[,cumulativeweek := cumsum(c_week)]
DT$c_week<-NULL
scoresandstats$c_week<-NULL
setkey(scoresandstats, season, week)
setkey(DT,season,week)
scoresandstats<-merge(scoresandstats,DT)
View(scoresandstats)
library(data.table)
if (file.exists("./project/volume/data/processed/StatsandBoxscores.csv")) {
file.remove("./project/volume/data/processed/StatsandBoxscores.csv")}
#read in player statistics table
playerstats<-fread("./project/volume/data/interim/gamePlayerstats.csv")
#read in box scores table
boxscores<-fread("./project/volume/data/interim/allBoxscores.csv")
#only concerned with stats from 2009 on as the box scores data starts at 2009
playerstats<-playerstats[season>2008]
#Create home and away team tables
home<-boxscores[,.(game_id,home_team,week,season,home_score)]
setnames(home,c("home_team","home_score"),c("Tm","score"))
away<-boxscores[,.(game_id,away_team,week,season,away_score)]
setnames(away,c("away_team","away_score"),c("Tm","score"))
#Rbind home and away to create allboxscores
allboxscores<-rbind(home,away)
allboxscores<-merge(allboxscores,allboxscores,by=c("game_id","week","season"),allow.cartesian = T)
setnames(allboxscores,c("Tm.x","score.x","Tm.y","score.y"), c("Tm","Tmscore","Opponent","Opponentscore"))
allboxscores<-allboxscores[!Tm==Opponent]
#Fix situations where Team name (Tm) is different from one table to the next
playerstats[playerstats$Tm == "NOR"]$Tm<-"NO"
playerstats[playerstats$Tm == "KAN"]$Tm<-"KC"
playerstats[playerstats$Tm == "NWE"]$Tm<-"NE"
playerstats[playerstats$Tm == "GNB"]$Tm<-"GB"
playerstats[playerstats$Tm == "SFO"]$Tm<-"SF"
playerstats[playerstats$Tm == "TAM"]$Tm<-"TB"
playerstats[playerstats$Tm == "SDG"]$Tm<-"SD"
playerstats[playerstats$Tm == "LAR"]$Tm<-"LA"
allboxscores[allboxscores$Tm=="JAC"]$Tm<-"JAX"
#Set keys for each table so merge can occur
setkey(playerstats,week,season,Tm)
setkey(allboxscores,week,season,Tm)
scoresandstats<-merge(playerstats,allboxscores, all.x = T)
scoresandstats<-scoresandstats[order(season,week)]
#Create separate table with just team, week, and c_week to calculate the correct cumulative week
DT<- scoresandstats[,.(season,week,c_week)]
DT<-DT[!duplicated(DT)]
DT<-DT[,cumulativeweek := cumsum(c_week)]
DT$c_week<-NULL
scoresandstats$c_week<-NULL
setkey(scoresandstats, season, week)
setkey(DT,season,week)
scoresandstats<-merge(scoresandstats,DT)
View(scoresandstats)
#Add in variable to look at target %
passingstats<-dcast(scoresandstats, gameid+team~.,sum,na.rm=T,value.var= c("passingattempts", "tgt"))
View(scoresandstats)
#Add in variable to look at target %
passingstats<-dcast(scoresandstats, gameid+team~.,sum,na.rm=T,value.var= c("PassingAtt", "Tgt"))
#Add in variable to look at target %
passingstats<-dcast(scoresandstats, game_id+Tm~.,sum,na.rm=T,value.var= c("PassingAtt", "Tgt"))
View(passingstats)
setname(passingstats, c("passingattempts", "targets"), c("teamtotalpassingattempts","teamtotaltargets"))
setname(passingstats, c("PassingAtt", "Tgt"), c("Teamtotalpassingattempts","Teamtotaltargets"))
setnames(passingstats, c("PassingAtt", "Tgt"), c("Teamtotalpassingattempts","Teamtotaltargets"))
View(passingstats)
passingstats$TotalPassAttempts<-max(Teamtotalpassingattempts, Teamtotaltargets)
View(passingstats)
passingstats$TotalPassAttempts<-max(passingstats$Teamtotalpassingattempts, passingstats$Teamtotaltargets)
View(passingstats)
passingstats$TotalPassAttempts<-max(passingstats$Teamtotalpassingattempts, passingstats$Teamtotaltargets, by = row)
View(passingstats)
passingstats<-dcast(scoresandstats, game_id+Tm~.,sum,na.rm=T,value.var= c("PassingAtt", "Tgt"))
setnames(passingstats, c("PassingAtt", "Tgt"), c("Teamtotalpassingattempts","Teamtotaltargets"))
setkey(passingstats, game_id, Tm)
setkey(scoresandstats,game_id,Tm)
View(passingstats)
passingstats$difference<-passingstats$Teamtotalpassingattempts-passingstats$Teamtotaltargets
passingstats["difference"<0]
passingstats<-dcast(scoresandstats, game_id+Tm~.,sum,na.rm=T,value.var= "PassingAtt")
setnames(passingstats, "PassingAtt","Teamtotalpassingattempts")
setkey(passingstats, game_id, Tm)
setkey(scoresandstats,game_id,Tm)
passingstats<-dcast(scoresandstats, game_id+Tm~.,sum,na.rm=T,value.var= "PassingAtt")
setnames(passingstats, "PassingAtt","Teamtotalpassingattempts")
library(data.table)
#remove file if it already exists
if (file.exists("./project/volume/data/processed/StatsandBoxscores.csv")) {
file.remove("./project/volume/data/processed/StatsandBoxscores.csv")}
#read in player statistics table
playerstats<-fread("./project/volume/data/interim/gamePlayerstats.csv")
#read in box scores table
boxscores<-fread("./project/volume/data/interim/allBoxscores.csv")
#only concerned with stats from 2009 on as the box scores data starts at 2009
playerstats<-playerstats[season>2008]
#Create home and away team tables
home<-boxscores[,.(game_id,home_team,week,season,home_score)]
setnames(home,c("home_team","home_score"),c("Tm","score"))
away<-boxscores[,.(game_id,away_team,week,season,away_score)]
setnames(away,c("away_team","away_score"),c("Tm","score"))
#Rbind home and away to create allboxscores
allboxscores<-rbind(home,away)
allboxscores<-merge(allboxscores,allboxscores,by=c("game_id","week","season"),allow.cartesian = T)
setnames(allboxscores,c("Tm.x","score.x","Tm.y","score.y"), c("Tm","Tmscore","Opponent","Opponentscore"))
allboxscores<-allboxscores[!Tm==Opponent]
#Fix situations where Team name (Tm) is different from one table to the next
playerstats[playerstats$Tm == "NOR"]$Tm<-"NO"
playerstats[playerstats$Tm == "KAN"]$Tm<-"KC"
playerstats[playerstats$Tm == "NWE"]$Tm<-"NE"
playerstats[playerstats$Tm == "GNB"]$Tm<-"GB"
playerstats[playerstats$Tm == "SFO"]$Tm<-"SF"
playerstats[playerstats$Tm == "TAM"]$Tm<-"TB"
playerstats[playerstats$Tm == "SDG"]$Tm<-"SD"
playerstats[playerstats$Tm == "LAR"]$Tm<-"LA"
allboxscores[allboxscores$Tm=="JAC"]$Tm<-"JAX"
#Set keys for each table so merge can occur
setkey(playerstats,week,season,Tm)
setkey(allboxscores,week,season,Tm)
scoresandstats<-merge(playerstats,allboxscores, all.x = T)
scoresandstats<-scoresandstats[order(season,week)]
#Create separate table with just team, week, and c_week to calculate the correct cumulative week
DT<- scoresandstats[,.(season,week,c_week)]
DT<-DT[!duplicated(DT)]
DT<-DT[,cumulativeweek := cumsum(c_week)]
DT$c_week<-NULL
scoresandstats$c_week<-NULL
setkey(scoresandstats, season, week)
setkey(DT,season,week)
scoresandstats<-merge(scoresandstats,DT)
#Add in variable to look at target %
passingstats<-dcast(scoresandstats, game_id+Tm~.,sum,na.rm=T,value.var= "PassingAtt")
View(passingstats)
setnames(passingstats, ".","Teamtotalpassingattempts")
View(passingstats)
setkey(passingstats, game_id, Tm)
setkey(scoresandstats,game_id,Tm)
scoresandstats<-merge(scoresandstats,passingstats, all.x=T)
View(scoresandstats)
scoresandstats$Tgt_share<-scoresandstats$Tgt/scoresandstats$Teamtotalpassingattempts
View(scoresandstats)
#Add variable to get passing variance
passingvariancestats<-dcast(scoresandstats[tgts>0], game_id+Tm~.,var,na.rm=T,value.var= Tgt_share)
#Add variable to get passing variance
passingvariancestats<-dcast(scoresandstats[Tgt>0], game_id+Tm~.,var,na.rm=T,value.var= Tgt_share)
View(scoresandstats)
#Add variable to get passing variance
passingvariancestats<-dcast(scoresandstats[Tgt>0], game_id+Tm~.,var,na.rm=T,value.var= "Tgt_share")
View(passingvariancestats)
setname(passingvariancestats, ".", "Teamvariancetargetshare")
setnames(passingvariancestats, ".", "Teamvariancetargetshare")
View(passingvariancestats)
setkey(passingvariancestats, game_id, Tm)
setkey(scoresandstats,game_id,Tm)
scoresandstats<-merge(scoresandstats,passingvariancestats, all.x=T)
View(scoresandstats)
View(scoresandstats)
#Add in variable for rushing %
rushingstats<-dcast(scoresandstats, game_id+Tm~.,sum,na.rm=T,value.var= "RushingAtt")
View(rushingstats)
setnames(rushingstats, ".","Teamtotalrushingattempts")
View(rushingstats)
setkey(rushingstats, game_id, Tm)
setkey(scoresandstats,game_id,Tm)
scoresandstats<-merge(scoresandstats,rushingstats, all.x=T)
scoresandstats$Rushing_share<-scoresandstats$RushingAtt/scoresandstats$Teamtotalrushingattempts
View(scoresandstats)
#Add variable to get rushing variance
rushingvariancestats<-dcast(scoresandstats[RushingAtt>0], game_id+Tm~.,var,na.rm=T,value.var= "Rushing_share")
View(rushingvariancestats)
setnames(rushingvariancestats, ".", "Teamvariancerushingshare")
View(rushingvariancestats)
setkey(rushingvariancestats, game_id, Tm)
setkey(scoresandstats,game_id,Tm)
scoresandstats<-merge(scoresandstats,rushingvariancestats, all.x=T)
View(scoresandstats)
View(scoresandstats)
#Add in variable for passing %
scoresandstats$Passing_share<-scoresandstats$PassingAtt/scoresandstats$Teamtotalpassingattempts
View(scoresandstats)
View(scoresandstats)
passingvariancestats<-dcast(scoresandstats[PassingAtt>0], game_id+Tm~.,var,na.rm=T,value.var= "Passing_share")
setnames(passingvariancestats, ".", "Teamvariancepassingshare")
setkey(passingvariancestats, game_id, Tm)
setkey(scoresandstats,game_id,Tm)
scoresandstats<-merge(scoresandstats,passingvariancestats, all.x=T)
View(scoresandstats)
#Write out data
fwrite(scoresandstats,"project/volume/data/processed/StatsandBoxscores.csv")
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
player_achieved<-statsandscores
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/playerstats(roll3).csv")) {
file.remove("./project/volume/data/processed/playerstats(roll3).csv")}
View(player_achieved)
View(statsandscores)
View(player_achieved)
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL", "Tgt_share","Rushing_share","Passing_share", "Teamtotalpassingattempts",
"Teamtotalrushingattempts","Teamvariancetargetshare","Teamvariancerushingshare","Teamvariancepassingshare",
"PPRFantasyPoints","StandardFantasyPoints","HalfPPRFantasyPoints")
setkey(player_achieved,Player,cumulativeweek)
for (i in 1:length(NFLvalues)) {
player_achieved[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:3))]
setnames(player_achieved,"new_column",paste0("roll_3_",NFLvalues[i]))
}
fwrite(player_achieved, "project/volume/data/processed/playerstats(roll3).csv")
View(player_achieved)
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
player_achieved<-statsandscores
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/playerstats(roll4).csv")) {
file.remove("./project/volume/data/processed/playerstats(roll4).csv")}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL", "Tgt_share","Rushing_share","Passing_share", "Teamtotalpassingattempts",
"Teamtotalrushingattempts","Teamvariancetargetshare","Teamvariancerushingshare","Teamvariancepassingshare",
"PPRFantasyPoints","StandardFantasyPoints","HalfPPRFantasyPoints")
setkey(player_achieved,Player,cumulativeweek)
for (i in 1:length(NFLvalues)) {
player_achieved[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:4))]
setnames(player_achieved,"new_column",paste0("roll_4_",NFLvalues[i]))
}
fwrite(player_achieved, "project/volume/data/processed/playerstats(roll4).csv")
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
player_achieved<-statsandscores
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/playerstats(roll5).csv")) {
file.remove("./project/volume/data/processed/playerstats(roll5).csv")}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL", "Tgt_share","Rushing_share","Passing_share", "Teamtotalpassingattempts",
"Teamtotalrushingattempts","Teamvariancetargetshare","Teamvariancerushingshare","Teamvariancepassingshare",
"PPRFantasyPoints","StandardFantasyPoints","HalfPPRFantasyPoints")
setkey(player_achieved,Player,cumulativeweek)
for (i in 1:length(NFLvalues)) {
player_achieved[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:5))]
setnames(player_achieved,"new_column",paste0("roll_5_",NFLvalues[i]))
}
fwrite(player_achieved, "project/volume/data/processed/playerstats(roll5).csv")
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/teamstats(roll3).csv")) {
file.remove("./project/volume/data/processed/teamstats(roll3).csv")}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL", "Tgt_share","Rushing_share","Passing_share", "Teamtotalpassingattempts",
"Teamtotalrushingattempts","Teamvariancetargetshare","Teamvariancerushingshare","Teamvariancepassingshare",
"PPRFantasyPoints","StandardFantasyPoints","HalfPPRFantasyPoints")
teamAllowed<-dcast(statsandscores,Opponent+Tm+game_id+season+week+cumulativeweek~.,
sum,na.rm=T,value.var = NFLvalues)
setkey(teamAllowed,Opponent,cumulativeweek)
for (i in 1:length(NFLvalues)) {
teamAllowed[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:3))]
setnames(teamAllowed,"new_column",paste0("roll_3_",NFLvalues[i]))
}
fwrite(teamAllowed, "./project/volume/data/processed/teamstats(roll3).csv")
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/teamstats(roll4).csv")) {
file.remove("./project/volume/data/processed/teamstats(roll4).csv")}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL", "Tgt_share","Rushing_share","Passing_share", "Teamtotalpassingattempts",
"Teamtotalrushingattempts","Teamvariancetargetshare","Teamvariancerushingshare","Teamvariancepassingshare",
"PPRFantasyPoints","StandardFantasyPoints","HalfPPRFantasyPoints")
teamAllowed<-dcast(statsandscores,Opponent+Tm+game_id+season+week+cumulativeweek~.,
sum,na.rm=T,value.var = NFLvalues)
setkey(teamAllowed,Opponent,cumulativeweek)
for (i in 1:length(NFLvalues)) {
teamAllowed[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:4))]
setnames(teamAllowed,"new_column",paste0("roll_4_",NFLvalues[i]))
}
fwrite(teamAllowed, "./project/volume/data/processed/teamstats(roll4).csv")
library(data.table)
statsandscores<-fread("./project/volume/data/processed/StatsandBoxscores.csv")
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/teamstats(roll5).csv")) {
file.remove("./project/volume/data/processed/teamstats(roll5).csv")}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL", "Tgt_share","Rushing_share","Passing_share", "Teamtotalpassingattempts",
"Teamtotalrushingattempts","Teamvariancetargetshare","Teamvariancerushingshare","Teamvariancepassingshare",
"PPRFantasyPoints","StandardFantasyPoints","HalfPPRFantasyPoints")
teamAllowed<-dcast(statsandscores,Opponent+Tm+game_id+season+week+cumulativeweek~.,
sum,na.rm=T,value.var = NFLvalues)
setkey(teamAllowed,Opponent,cumulativeweek)
for (i in 1:length(NFLvalues)) {
teamAllowed[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:5))]
setnames(teamAllowed,"new_column",paste0("roll_5_",NFLvalues[i]))
}
fwrite(teamAllowed, "./project/volume/data/processed/teamstats(roll5).csv")
