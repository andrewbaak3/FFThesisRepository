early_stopping_rounds=25)
#removed test = dtest and put after the cross validation (potential bug fix)
watchlist <- list(train = dtrain)
#Create Predictions
XGB_model<-xgb.train(params=param,nrounds= XGB_cv$best_iteration,missing=NA,data=dtrain,watchlist=watchlist,
print_every_n=1,nthread=4)
best_ntrees<-XGB_cv$best_iteration
train_param<-data.table(t(param))
train_param$best_ntrees<-best_ntrees
train_error<-unclass(XGB_model)$evaluation_log[as.numeric(best_ntrees),]$train_rmse
train_param$train_error<-train_error
pred<-predict(XGB_model, newdata=dtest)
train_param$test_error_train<-rmse(test_y, pred)
train_param$cv_error<-XGB_cv$evaluation_log[XGB_cv$best_iteration]$test_rmse_mean
path3<-"./project/src/models/HyperParams/Hyperparams"
path4<-paste0(path3,pos)
path5<-paste0(path4,rolltime,"2016train",".csv")
fwrite(train_param,path5, append = T)
#Create Predictions
pred<-predict(XGB_model, newdata=dtest)
#Add predictions to output data table as new column, PredPoints
output$PredPoints<-pred
View(output)
#Write out output table to teamconstruction folder, where it can be used to aid in team construction
fwrite(output,"./project/volume/data/teamconstruction/",rolltime,"_",pos,".csv")
#Write out output table to teamconstruction folder, where it can be used to aid in team construction
teampath<-paste0("./project/volume/data/teamconstruction/",rolltime,"_",pos,".csv")
teampath
fwrite(output,teampath)
ininstall.packages("reticulate")
install.packages("reticulate")
library(reticulate)
reticulate::repl_python()
library(reticulate)
library(reticulate)
use_python = ("/usr/bin/python")
library(reticulate)
use_python = ("./anaconda3/lib/python3.7")
library(reticulate)
use_python = ("./anaconda3/lib/python3.7")
reticulate::repl_python()
library(purrr)
library(rvest)
library(data.table)
library(stringr)
library(tidyr)
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
s<-1
w<-1
s<-2015
temp$link<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
View(result)
result$link
seasons[s]
s
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
s<-"2014"
w<-1
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
View(result)
result$link
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
s<-'2014'
w<-1
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(s)
temp$week<-weeks[w]
result<-rbind(result,temp)
View(result)
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(s)
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
View(result)
seasons[s]
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(sesaons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
View(result)
result$link[119]
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
View(result)
result$link[111]
result$link[2]
#Get rid of any potential empty values from result
result<-compact(result)
#Split result into a list with 3 pieces (link, season, week)
result<-split(result, result$link)
result$`http://rotoguru1.com/cgi-bin/fyday.pl?week=1&year=2014&game=dk`
i<2
i<-2
result[i]
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
View(result)
result[14]
Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
#Split result into a list with 3 pieces (link, season, week)
result<-split(result, result$link)
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
View(result)
result[22]
final<-data.table()
i<-1
page<-read_html(result[i])
result<-list(result)
View(result)
page<-read_html(result[i])
?read_html
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-NULL
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
View(result)
#Get rid of any potential empty values from result
result<-compact(result)
i<1
i<-1
page<-read_html(result[i])
View(page)
data<-page%>%html_nodes("pre")%>%html_text()
final<-rbind(data,final)
final<-data.table()
final<-rbind(data,final)
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-NULL
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk&scsv=1")
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
final<-data.table()
i<-1
page<-read_html(result[i])
data<-page%>%html_nodes("pre")%>%html_text()
final<-rbind(data,final)
View(final)
data
data[2]
data[2]
data[3]
?html_node
final
View(final)
?split()
page<-read_html(result[i])
data<-page%>%html_nodes("pre")
View(data)
final<-rbind(data,final)
library(purrr)
library(rvest)
library(data.table)
library(stringr)
library(tidyr)
#SCRAPING
#Declare initial path, seasons and weeks to iterate through
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-NULL
temp<-NULL
#Use nested for loops to generate all the urls to search through
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk&scsv=1")
result<-rbind(result,temp)
}
}
#Loop over result, output to final data table
final <- data.table::rbindlist(
lapply(result, function(x) {
read_html(x) %>%
html_nodes("pre") %>%
html_text() %>%
data.table::fread( sep = ";" )
} ),
use.names = TRUE, fill = TRUE )
final$Name<-sub("(^.*),\\s(.*$)","\\2 \\1", final$Name)
View(final)
final[final$Team == "atl"]$Team<-"ATL"
final[final$Team == "det"]$Team<-"DET"
final[final$Team == "ind"]$Team<-"IND"
final[final$Team == "ari"]$Team<-"ARI"
final[final$Team == "chi"]$Team<-"CHI"
final[final$Team == "den"]$Team<-"DEN"
final[final$Team == "pit"]$Team<-"PIT"
final[final$Team == "cin"]$Team<-"CIN"
final[final$Team == "phi"]$Team<-"PHI"
final[final$Team == "bal"]$Team<-"BAL"
final[final$Team == "ten"]$Team<-"TEN"
final[final$Team == "nor"]$Team<-"NO"
final[final$Team == "sea"]$Team<-"SEA"
final[final$Team == "jac"]$Team<-"JAX"
final[final$Team == "car"]$Team<-"CAR"
final[final$Team == "buf"]$Team<-"BUF"
final[final$Team == "sfo"]$Team<-"SF"
final[final$Team == "tam"]$Team<-"TB"
final[final$Team == "nyj"]$Team<-"NYJ"
final[final$Team == "min"]$Team<-"MIN"
final[final$Team == "oak"]$Team<-"OAK"
final[final$Team == "mia"]$Team<-"MIA"
final[final$Team == "sdg"]$Team<-"SD"
final[final$Team == "hou"]$Team<-"HOU"
final[final$Team == "cle"]$Team<-"CLE"
final[final$Team == "kan"]$Team<-"KC"
final[final$Team == "nwe"]$Team<-"NE"
final[final$Team == "dal"]$Team<-"DAL"
final[final$Team == "gnb"]$Team<-"GB"
final[final$Team == "was"]$Team<-"WAS"
final[final$Team == "nyg"]$Team<-"NYG"
final[final$Team == "stl"]$Team<-"STL"
final[final$Team == "lar"]$Team<-"LA"
final[final$Team == "lac"]$Team<-"LAC"
final[final$Team == "lvr"]$Team<-"OAK"
#Change team names in Oppt column to the same abbreviation as they are in the training data
final[final$Oppt == "atl"]$Oppt<-"ATL"
final[final$Oppt == "det"]$Oppt<-"DET"
final[final$Oppt == "ind"]$Oppt<-"IND"
final[final$Oppt == "ari"]$Oppt<-"ARI"
final[final$Oppt == "chi"]$Oppt<-"CHI"
final[final$Oppt == "den"]$Oppt<-"DEN"
final[final$Oppt == "pit"]$Oppt<-"PIT"
final[final$Oppt == "cin"]$Oppt<-"CIN"
final[final$Oppt == "phi"]$Oppt<-"PHI"
final[final$Oppt == "bal"]$Oppt<-"BAL"
final[final$Oppt == "ten"]$Oppt<-"TEN"
final[final$Oppt == "nor"]$Oppt<-"NO"
final[final$Oppt == "sea"]$Oppt<-"SEA"
final[final$Oppt == "jac"]$Oppt<-"JAX"
final[final$Oppt == "car"]$Oppt<-"CAR"
final[final$Oppt == "buf"]$Oppt<-"BUF"
final[final$Oppt == "sfo"]$Oppt<-"SF"
final[final$Oppt == "tam"]$Oppt<-"TB"
final[final$Oppt == "nyj"]$Oppt<-"NYJ"
final[final$Oppt == "min"]$Oppt<-"MIN"
final[final$Oppt == "oak"]$Oppt<-"OAK"
final[final$Oppt == "mia"]$Oppt<-"MIA"
final[final$Oppt == "sdg"]$Oppt<-"SD"
final[final$Oppt == "hou"]$Oppt<-"HOU"
final[final$Oppt == "cle"]$Oppt<-"CLE"
final[final$Oppt == "kan"]$Oppt<-"KC"
final[final$Oppt == "nwe"]$Oppt<-"NE"
final[final$Oppt == "dal"]$Oppt<-"DAL"
final[final$Oppt == "gnb"]$Oppt<-"GB"
final[final$Oppt == "was"]$Oppt<-"WAS"
final[final$Oppt == "nyg"]$Oppt<-"NYG"
final[final$Oppt == "stl"]$Oppt<-"STL"
final[final$Oppt == "lar"]$Oppt<-"LA"
final[final$Oppt == "lac"]$Oppt<-"LAC"
final[final$Oppt == "lvr"]$Oppt<-"OAK"
#Add new column with points per dollar of salary
final$PPD<-final$`DK points`/final$`DK salary`
#Add new column with points per dollar of salary
final$PPD<-(final$`DK points`/final$`DK salary`)*1000
#write out final as a csv to interim data folder
fwrite(final, "./project/volume/data/interim/DKsalaries.csv")
library(data.table)
RBdata<-fread("./project/volume/data/teamconstruction/roll7_RB.csv")
DKdata<-fread("./project/volume/data/interim/DKsalaries.csv")
View(DKdata)
DKdrops<-c("GID","Team","h/a","Oppt")
DKdata<-DKdata[, !DKdrops, with = FALSE]
View(DKdata)
colnames(DKdata)
colnames(RBdata)
names(RBdata)
setnames(DKdata, c("Week","Year","Name"), c("week","season","Player"))
names(RBdata)
names(DKdata)
setkey(RBdata,season,week,Player,Pos)
setkey(DKdata,season,week,Player,Pos)
final<-merge(RBdata,DKdata, all.x = TRUE)
View(final)
View(final)
checkforDKfile <- function() {
if (file.exists("./project/volume/data/interim/DKsalaries.csv")) {
print("The file already exists")}
else {
source("./project/src/features/DKsalaryscraping.R")
}
}
checkforDKfile()
library(data.table)
#Read in the Data
#To add all data would probably use a loop to iterate through, adding everything to a final data table
RBdata<-fread("./project/volume/data/teamconstruction/roll7_RB.csv")
DKdata<-fread("./project/volume/data/interim/DKsalaries.csv")
#Set columns to drop from draftkings data and remove them
DKdrops<-c("GID","Team","h/a","Oppt")
DKdata<-DKdata[, !DKdrops, with = FALSE]
#Rename columns in draftkings data to ease merging process
setnames(DKdata, c("Week","Year","Name"), c("week","season","Player"))
#Set keys, merge the two datasets together
setkey(RBdata,season,week,Player,Pos)
setkey(DKdata,season,week,Player,Pos)
final<-merge(RBdata,DKdata, all.x = TRUE)
View(final)
library(purrr)
library(rvest)
library(data.table)
library(stringr)
library(tidyr)
#Declare variables and empty data tables
path1<-("https://www.footballdb.com/transactions/injuries.html?yr=")
seasons<-c("2016", "2017", "2020")
weeks<-1:17
result<-data.table()
temp<-NULL
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, seasons[s],"&wk=", as.character(w), "&type=reg")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
#Split result into a list with 3 pieces (link, season, week)
result<-split(result, result$link)
DT <- map_df(result, function(x){
page <- read_html(x[[1]])
data.table(
season = x[[2]],
week = x[[3]],
Player = page %>% html_nodes('.divtable .td:nth-child(1) b') %>% html_text(),
Injury = page %>% html_nodes('.divtable .td:nth-child(2)') %>% html_text(),
Wed = page %>% html_nodes('.divtable .td:nth-child(3)') %>% html_text(),
Thu = page %>% html_nodes('.divtable .td:nth-child(4)') %>% html_text(),
Fri = page %>% html_nodes('.divtable .td:nth-child(5)') %>% html_text(),
GameStatus = page %>% html_nodes('.divtable .td:nth-child(6)') %>% html_text()
)
}
)
#Order by season and week
DT<-DT[order(season,week)]
#Remove everything from DT$GameStatus except for status
DT$GameStatus<-gsub("[0-9]","",DT$GameStatus)
DT$GameStatus<-gsub("[()]","",DT$GameStatus)
DT$GameStatus<-gsub("vs","",DT$GameStatus)
DT$GameStatus<-gsub("[@]","",DT$GameStatus)
DT$GameStatus<-gsub("[/]","",DT$GameStatus)
DT$GameStatus<-str_sub(DT$GameStatus, 1, str_length(DT$GameStatus)-3)
DT$GameStatus<-gsub(" ", "", DT$GameStatus)
#Remove -- values in each of the columns
DT[DT$GameStatus == "--"]$GameStatus<-NA
DT[DT$season == "--"]$season<-NA
DT[DT$week == "--"]$week<-NA
DT[DT$Player == "--"]$Player<-NA
DT[DT$Wed == "--"]$Wed<-NA
DT[DT$Thu == "--"]$Thu<-NA
DT[DT$Fri == "--"]$Fri<-NA
DT[DT$Injury == "--"]$Injury<-NA
#Set all injuries to lowercase to help get rid of duplicates
DT$Injury<-tolower(DT$Injury)
#Create ID column for DT
DT$id<-1:nrow(DT)
#Split Injury Column into multiple injuries creating dummy variables
types_tab<-as.data.table(tstrsplit(DT$Injury,","))
types_tab$id<-DT$id
m_types_tab<-melt(types_tab,id.vars = "id")
m_types_tab$value<-trimws(m_types_tab$value, which = "both")
m_types_tab$value<-gsub(" ", "_",m_types_tab$value)
m_types_tab$value<-gsub("/", "_",m_types_tab$value)
m_types_tab$value<-gsub("-", "", m_types_tab$value)
m_types_tab<-m_types_tab[!is.na(m_types_tab$value)]
m_types_tab$True<-1
types_tab<-dcast(m_types_tab,id ~ value,length,value.var="True")
#Merge tables together into one big table
InjuryTable<-merge(DT,types_tab, by = "id")
View(InjuryTable)
str(InjuryTable)
#Get rid of columns not of interest
drops<-c("id","Injury")
InjuryTable<-InjuryTable[, !drops, with = FALSE]
str(InjuryTable)
topinjuries<-c("season","week","Player","Wed","Thu","Fri","GameStatus","ankle", "concussion","toe",
"left_shoulder","knee")
col(InjuryTable)
names(InjuryTable)
length(names(InjuryTable))
i<-1
names(InjuryTable)[i]
keeps<-c("season","week","Player","Wed","Thu","Fri","GameStatus","ankle", "concussion","toe",
"left_shoulder","knee")
?lm
rbind?
r
rbind()?
?rbind()
