"Player_roll_5_ReceivingYds","Player_roll_5_ReceivingTD","Player_roll_5_FL",
"Player_roll_5_PPRFantasyPoints","Player_roll_5_Tgt_share","Player_roll_5_Rushing_share",
"Player_roll_5_Passing_share","Player_roll_5_Teamtotalpassingattempts","Player_roll_5_Teamtotalrushingattempts",
"Player_roll_5_Teamvariancepassingshare","Player_roll_5_Teamvariancerushingshare",
"Player_roll_5_Teamvariancetargetshare"))
setnames(teamstats, c("roll_5_PassingYds","roll_5_PassingTD","roll_5_Int","roll_5_PassingAtt","roll_5_Cmp","roll_5_RushingAtt",
"roll_5_RushingYds","roll_5_RushingTD","roll_5_Rec","roll_5_Tgt","roll_5_ReceivingYds",
"roll_5_ReceivingTD","roll_5_FL","roll_5_Tgt_share","roll_5_Rushing_share",
"roll_5_Passing_share","roll_5_Teamtotalpassingattempts","roll_5_Teamtotalrushingattempts",
"roll_5_Teamvariancepassingshare","roll_5_Teamvariancerushingshare","roll_5_Teamvariancetargetshare"),
c("TeamAllowed_roll_5_PassingYds", "TeamAllowed_roll_5_PassingTD","TeamAllowed_roll_5_Int","TeamAllowed_roll_5_PassingAtt",
"TeamAllowed_roll_5_Cmp","TeamAllowed_roll_5_RushingAtt","TeamAllowed_roll_5_RushingYds",
"TeamAllowed_roll_5_RushingTD","TeamAllowed_roll_5_Rec","TeamAllowed_roll_5_Tgt",
"TeamAllowed_roll_5_ReceivingYds","TeamAllowed_roll_5_ReceivingTD","TeamAllowed_roll_5_FL",
"TeamAllowed_roll_5_Tgt_share","TeamAllowed_roll_5_Rushing_share","TeamAllowed_roll_5_Passing_share",
"TeamAllowed_roll_5_Teamtotalpassingattempts","TeamAllowed_roll_5_Teamtotalrushingattempts",
"TeamAllowed_roll_5_Teamvariancepassingshare","TeamAllowed_roll_5_Teamvariancerushingshare",
"TeamAllowed_roll_5_Teamvariancetargetshare"))
#Set Keys and Merge Together PlayerStats and Teamstats to create train set
setkey(playerstats,season,week,Tm,game_id,Opponent)
setkey(teamstats,season,week,Tm,game_id,Opponent)
train<-merge(playerstats,teamstats)
#Calculate difference values for applicable rows
#ReceivingYds
scale_transform<-preProcess(train[,.(Player_roll_5_ReceivingYds,TeamAllowed_roll_5_ReceivingYds)],
method=c("center","scale"))
scaled_receiving_yds<-predict(scale_transform,train[,.(Player_roll_5_ReceivingYds,TeamAllowed_roll_5_ReceivingYds)])
train$ReceivingYds_Dif<-scaled_receiving_yds$Player_roll_5_ReceivingYds-scaled_receiving_yds$TeamAllowed_roll_5_ReceivingYds
#RushingYds
scale_transform2<-preProcess(train[,.(Player_roll_5_RushingYds,TeamAllowed_roll_5_RushingYds)],
method=c("center","scale"))
scaled_rushing_yds<-predict(scale_transform2,train[,.(Player_roll_5_RushingYds,TeamAllowed_roll_5_RushingYds)])
train$RushingYds_Dif<-scaled_rushing_yds$Player_roll_5_RushingYds-scaled_rushing_yds$TeamAllowed_roll_5_RushingYds
#PassingYds
scale_transform3<-preProcess(train[,.(Player_roll_5_PassingYds,TeamAllowed_roll_5_PassingYds)],
method=c("center","scale"))
scaled_passing_yds<-predict(scale_transform3,train[,.(Player_roll_5_PassingYds,TeamAllowed_roll_5_PassingYds)])
train$PassingYds_Dif<-scaled_passing_yds$Player_roll_5_PassingYds-scaled_passing_yds$TeamAllowed_roll_5_PassingYds
#Targets
scale_transform4<-preProcess(train[,.(Player_roll_5_Tgt,TeamAllowed_roll_5_Tgt)],
method=c("center","scale"))
scaled_targets<-predict(scale_transform4,train[,.(Player_roll_5_Tgt,TeamAllowed_roll_5_Tgt)])
train$Targets_Dif<-scaled_targets$Player_roll_5_Tgt-scaled_targets$TeamAllowed_roll_5_Tgt
#PassingAttempts
scale_transform5<-preProcess(train[,.(Player_roll_5_PassingAtt,TeamAllowed_roll_5_PassingAtt)],
method=c("center","scale"))
scaled_passingattempts<-predict(scale_transform5,train[,.(Player_roll_5_PassingAtt,TeamAllowed_roll_5_PassingAtt)])
train$Passing_Attempts_Dif<-scaled_passingattempts$Player_roll_5_PassingAtt-scaled_passingattempts$TeamAllowed_roll_5_PassingAtt
#RushingAttempts
scale_transform6<-preProcess(train[,.(Player_roll_5_RushingAtt,TeamAllowed_roll_5_RushingAtt)],
method=c("center","scale"))
scaled_rushingattempts<-predict(scale_transform6,train[,.(Player_roll_5_RushingAtt,TeamAllowed_roll_5_RushingAtt)])
train$Rushing_Attempts_Dif<-scaled_rushingattempts$Player_roll_5_RushingAtt-scaled_rushingattempts$TeamAllowed_roll_5_RushingAtt
#ReceivingTDs
scale_transform7<-preProcess(train[,.(Player_roll_5_ReceivingTD,TeamAllowed_roll_5_ReceivingTD)],
method=c("center","scale"))
scaled_receivingtds<-predict(scale_transform7,train[,.(Player_roll_5_ReceivingTD,TeamAllowed_roll_5_ReceivingTD)])
train$ReceivingTDs_Dif<-scaled_receivingtds$Player_roll_5_ReceivingTD-scaled_receivingtds$TeamAllowed_roll_5_ReceivingTD
#RushingTDs
scale_transform8<-preProcess(train[,.(Player_roll_5_RushingTD,TeamAllowed_roll_5_RushingTD)],
method=c("center","scale"))
scaled_rushingtds<-predict(scale_transform8,train[,.(Player_roll_5_RushingTD,TeamAllowed_roll_5_RushingTD)])
train$RushingTDs_Dif<-scaled_rushingtds$Player_roll_5_RushingTD-scaled_rushingtds$TeamAllowed_roll_5_RushingTD
#PassingTDs
scale_transform9<-preProcess(train[,.(Player_roll_5_PassingTD,TeamAllowed_roll_5_PassingTD)],
method=c("center","scale"))
scaled_passingtds<-predict(scale_transform9,train[,.(Player_roll_5_PassingTD,TeamAllowed_roll_5_PassingTD)])
train$PassingTDs_Dif<-scaled_passingtds$Player_roll_5_PassingTD-scaled_passingtds$TeamAllowed_roll_5_PassingTD
#RushingVar
scale_transform10<-preProcess(train[,.(Player_roll_5_Teamvariancerushingshare,TeamAllowed_roll_5_Teamvariancerushingshare)],
method=c("center","scale"))
scaled_rushingshare<-predict(scale_transform10,train[,.(Player_roll_5_Teamvariancerushingshare,TeamAllowed_roll_5_Teamvariancerushingshare)])
train$Rushing_Var_Dif<-scaled_rushingshare$Player_roll_5_Teamvariancerushingshare-scaled_rushingshare$TeamAllowed_roll_5_Teamvariancerushingshare
#PassingVar
scale_transform11<-preProcess(train[,.(Player_roll_5_Teamvariancepassingshare,TeamAllowed_roll_5_Teamvariancepassingshare)],
method=c("center","scale"))
scaled_passingshare<-predict(scale_transform11,train[,.(Player_roll_5_Teamvariancepassingshare,TeamAllowed_roll_5_Teamvariancepassingshare)])
train$Passing_Var_Dif<-scaled_passingshare$Player_roll_5_Teamvariancepassingshare-scaled_passingshare$TeamAllowed_roll_5_Teamvariancepassingshare
#TargetVar
scale_transform12<-preProcess(train[,.(Player_roll_5_Teamvariancetargetshare,TeamAllowed_roll_5_Teamvariancetargetshare)],
method=c("center","scale"))
scaled_tgtshare<-predict(scale_transform12,train[,.(Player_roll_5_Teamvariancetargetshare,TeamAllowed_roll_5_Teamvariancetargetshare)])
train$Tgt_Var_Dif<-scaled_tgtshare$Player_roll_5_Teamvariancetargetshare-scaled_tgtshare$TeamAllowed_roll_5_Teamvariancetargetshare
#RushingShare
scale_transform13<-preProcess(train[,.(Player_roll_5_Rushing_share,TeamAllowed_roll_5_Rushing_share)],
method=c("center","scale"))
scaled_rushing<-predict(scale_transform13,train[,.(Player_roll_5_Rushing_share,TeamAllowed_roll_5_Rushing_share)])
train$Rushing_Share_Dif<-scaled_rushing$Player_roll_5_Rushing_share-scaled_rushing$TeamAllowed_roll_5_Rushing_share
#PassingShare
scale_transform14<-preProcess(train[,.(Player_roll_5_Passing_share,TeamAllowed_roll_5_Passing_share)],
method=c("center","scale"))
scaled_passing<-predict(scale_transform14,train[,.(Player_roll_5_Passing_share,TeamAllowed_roll_5_Passing_share)])
train$Passing_Share_Dif<-scaled_passing$Player_roll_5_Passing_share-scaled_passing$TeamAllowed_roll_5_Passing_share
#TargetShare
scale_transform15<-preProcess(train[,.(Player_roll_5_Tgt_share,TeamAllowed_roll_5_Tgt_share)],
method=c("center","scale"))
scaled_tgt<-predict(scale_transform15,train[,.(Player_roll_5_Tgt_share,TeamAllowed_roll_5_Tgt_share)])
train$Tgt_Share_Dif<-scaled_tgt$Player_roll_5_Tgt_share-scaled_tgt$TeamAllowed_roll_5_Tgt_share
#Write out train set to processed folder
fwrite(train, "./project/volume/data/processed/train(roll5).csv")
library(data.table)
library(caret)
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/train(roll6).csv")) {
file.remove("./project/volume/data/processed/train(roll6).csv")}
playerstats<-fread("./project/volume/data/processed/playerstats(roll6).csv")
teamstats<-fread("./project/volume/data/processed/teamstats(roll6).csv")
playerstats<-playerstats[,.(season,week,Tm,Player,Pos,PPRFantasyPoints,game_id,Opponent,roll_6_PassingYds,roll_6_PassingTD,
roll_6_Int,roll_6_PassingAtt,roll_6_Cmp,roll_6_RushingAtt,roll_6_RushingYds,
roll_6_RushingTD,roll_6_Rec,roll_6_Tgt,roll_6_ReceivingYds,roll_6_ReceivingTD,
roll_6_FL,roll_6_PPRFantasyPoints,roll_6_Tgt_share,roll_6_Rushing_share,roll_6_Passing_share,
roll_6_Teamtotalpassingattempts,roll_6_Teamtotalrushingattempts,roll_6_Teamvariancepassingshare,
roll_6_Teamvariancerushingshare,roll_6_Teamvariancetargetshare)]
teamstats<-teamstats[,.(season,week,Tm,cumulativeweek,game_id,Opponent,roll_6_PassingYds,roll_6_PassingTD,roll_6_Int,
roll_6_PassingAtt, roll_6_Cmp,roll_6_RushingAtt,roll_6_RushingYds,roll_6_RushingTD,
roll_6_Rec,roll_6_Tgt,roll_6_ReceivingYds,roll_6_ReceivingTD,roll_6_FL,roll_6_Tgt_share,roll_6_Rushing_share,
roll_6_Passing_share,roll_6_Teamtotalpassingattempts,roll_6_Teamtotalrushingattempts,
roll_6_Teamvariancepassingshare,roll_6_Teamvariancerushingshare,roll_6_Teamvariancetargetshare)]
setnames(playerstats, c("roll_6_PassingYds","roll_6_PassingTD","roll_6_Int","roll_6_PassingAtt","roll_6_Cmp","roll_6_RushingAtt",
"roll_6_RushingYds","roll_6_RushingTD","roll_6_Rec","roll_6_Tgt","roll_6_ReceivingYds",
"roll_6_ReceivingTD","roll_6_FL","roll_6_PPRFantasyPoints","roll_6_Tgt_share","roll_6_Rushing_share",
"roll_6_Passing_share","roll_6_Teamtotalpassingattempts","roll_6_Teamtotalrushingattempts",
"roll_6_Teamvariancepassingshare","roll_6_Teamvariancerushingshare","roll_6_Teamvariancetargetshare"),
c("Player_roll_6_PassingYds", "Player_roll_6_PassingTD","Player_roll_6_Int","Player_roll_6_PassingAtt",
"Player_roll_6_Cmp","Player_roll_6_RushingAtt","Player_roll_6_RushingYds",
"Player_roll_6_RushingTD","Player_roll_6_Rec","Player_roll_6_Tgt",
"Player_roll_6_ReceivingYds","Player_roll_6_ReceivingTD","Player_roll_6_FL",
"Player_roll_6_PPRFantasyPoints","Player_roll_6_Tgt_share","Player_roll_6_Rushing_share",
"Player_roll_6_Passing_share","Player_roll_6_Teamtotalpassingattempts","Player_roll_6_Teamtotalrushingattempts",
"Player_roll_6_Teamvariancepassingshare","Player_roll_6_Teamvariancerushingshare",
"Player_roll_6_Teamvariancetargetshare"))
setnames(teamstats, c("roll_6_PassingYds","roll_6_PassingTD","roll_6_Int","roll_6_PassingAtt","roll_6_Cmp","roll_6_RushingAtt",
"roll_6_RushingYds","roll_6_RushingTD","roll_6_Rec","roll_6_Tgt","roll_6_ReceivingYds",
"roll_6_ReceivingTD","roll_6_FL","roll_6_Tgt_share","roll_6_Rushing_share",
"roll_6_Passing_share","roll_6_Teamtotalpassingattempts","roll_6_Teamtotalrushingattempts",
"roll_6_Teamvariancepassingshare","roll_6_Teamvariancerushingshare","roll_6_Teamvariancetargetshare"),
c("TeamAllowed_roll_6_PassingYds", "TeamAllowed_roll_6_PassingTD","TeamAllowed_roll_6_Int","TeamAllowed_roll_6_PassingAtt",
"TeamAllowed_roll_6_Cmp","TeamAllowed_roll_6_RushingAtt","TeamAllowed_roll_6_RushingYds",
"TeamAllowed_roll_6_RushingTD","TeamAllowed_roll_6_Rec","TeamAllowed_roll_6_Tgt",
"TeamAllowed_roll_6_ReceivingYds","TeamAllowed_roll_6_ReceivingTD","TeamAllowed_roll_6_FL",
"TeamAllowed_roll_6_Tgt_share","TeamAllowed_roll_6_Rushing_share","TeamAllowed_roll_6_Passing_share",
"TeamAllowed_roll_6_Teamtotalpassingattempts","TeamAllowed_roll_6_Teamtotalrushingattempts",
"TeamAllowed_roll_6_Teamvariancepassingshare","TeamAllowed_roll_6_Teamvariancerushingshare",
"TeamAllowed_roll_6_Teamvariancetargetshare"))
#Set Keys and Merge Together PlayerStats and Teamstats to create train set
setkey(playerstats,season,week,Tm,game_id,Opponent)
setkey(teamstats,season,week,Tm,game_id,Opponent)
train<-merge(playerstats,teamstats)
#Calculate difference values for applicable rows
#ReceivingYds
scale_transform<-preProcess(train[,.(Player_roll_6_ReceivingYds,TeamAllowed_roll_6_ReceivingYds)],
method=c("center","scale"))
scaled_receiving_yds<-predict(scale_transform,train[,.(Player_roll_6_ReceivingYds,TeamAllowed_roll_6_ReceivingYds)])
train$ReceivingYds_Dif<-scaled_receiving_yds$Player_roll_6_ReceivingYds-scaled_receiving_yds$TeamAllowed_roll_6_ReceivingYds
#RushingYds
scale_transform2<-preProcess(train[,.(Player_roll_6_RushingYds,TeamAllowed_roll_6_RushingYds)],
method=c("center","scale"))
scaled_rushing_yds<-predict(scale_transform2,train[,.(Player_roll_6_RushingYds,TeamAllowed_roll_6_RushingYds)])
train$RushingYds_Dif<-scaled_rushing_yds$Player_roll_6_RushingYds-scaled_rushing_yds$TeamAllowed_roll_6_RushingYds
#PassingYds
scale_transform3<-preProcess(train[,.(Player_roll_6_PassingYds,TeamAllowed_roll_6_PassingYds)],
method=c("center","scale"))
scaled_passing_yds<-predict(scale_transform3,train[,.(Player_roll_6_PassingYds,TeamAllowed_roll_6_PassingYds)])
train$PassingYds_Dif<-scaled_passing_yds$Player_roll_6_PassingYds-scaled_passing_yds$TeamAllowed_roll_6_PassingYds
#Targets
scale_transform4<-preProcess(train[,.(Player_roll_6_Tgt,TeamAllowed_roll_6_Tgt)],
method=c("center","scale"))
scaled_targets<-predict(scale_transform4,train[,.(Player_roll_6_Tgt,TeamAllowed_roll_6_Tgt)])
train$Targets_Dif<-scaled_targets$Player_roll_6_Tgt-scaled_targets$TeamAllowed_roll_6_Tgt
#PassingAttempts
scale_transform5<-preProcess(train[,.(Player_roll_6_PassingAtt,TeamAllowed_roll_6_PassingAtt)],
method=c("center","scale"))
scaled_passingattempts<-predict(scale_transform5,train[,.(Player_roll_6_PassingAtt,TeamAllowed_roll_6_PassingAtt)])
train$Passing_Attempts_Dif<-scaled_passingattempts$Player_roll_6_PassingAtt-scaled_passingattempts$TeamAllowed_roll_6_PassingAtt
#RushingAttempts
scale_transform6<-preProcess(train[,.(Player_roll_6_RushingAtt,TeamAllowed_roll_6_RushingAtt)],
method=c("center","scale"))
scaled_rushingattempts<-predict(scale_transform6,train[,.(Player_roll_6_RushingAtt,TeamAllowed_roll_6_RushingAtt)])
train$Rushing_Attempts_Dif<-scaled_rushingattempts$Player_roll_6_RushingAtt-scaled_rushingattempts$TeamAllowed_roll_6_RushingAtt
#ReceivingTDs
scale_transform7<-preProcess(train[,.(Player_roll_6_ReceivingTD,TeamAllowed_roll_6_ReceivingTD)],
method=c("center","scale"))
scaled_receivingtds<-predict(scale_transform7,train[,.(Player_roll_6_ReceivingTD,TeamAllowed_roll_6_ReceivingTD)])
train$ReceivingTDs_Dif<-scaled_receivingtds$Player_roll_6_ReceivingTD-scaled_receivingtds$TeamAllowed_roll_6_ReceivingTD
#RushingTDs
scale_transform8<-preProcess(train[,.(Player_roll_6_RushingTD,TeamAllowed_roll_6_RushingTD)],
method=c("center","scale"))
scaled_rushingtds<-predict(scale_transform8,train[,.(Player_roll_6_RushingTD,TeamAllowed_roll_6_RushingTD)])
train$RushingTDs_Dif<-scaled_rushingtds$Player_roll_6_RushingTD-scaled_rushingtds$TeamAllowed_roll_6_RushingTD
#PassingTDs
scale_transform9<-preProcess(train[,.(Player_roll_6_PassingTD,TeamAllowed_roll_6_PassingTD)],
method=c("center","scale"))
scaled_passingtds<-predict(scale_transform9,train[,.(Player_roll_6_PassingTD,TeamAllowed_roll_6_PassingTD)])
train$PassingTDs_Dif<-scaled_passingtds$Player_roll_6_PassingTD-scaled_passingtds$TeamAllowed_roll_6_PassingTD
#RushingVar
scale_transform10<-preProcess(train[,.(Player_roll_6_Teamvariancerushingshare,TeamAllowed_roll_6_Teamvariancerushingshare)],
method=c("center","scale"))
scaled_rushingshare<-predict(scale_transform10,train[,.(Player_roll_6_Teamvariancerushingshare,TeamAllowed_roll_6_Teamvariancerushingshare)])
train$Rushing_Var_Dif<-scaled_rushingshare$Player_roll_6_Teamvariancerushingshare-scaled_rushingshare$TeamAllowed_roll_6_Teamvariancerushingshare
#PassingVar
scale_transform11<-preProcess(train[,.(Player_roll_6_Teamvariancepassingshare,TeamAllowed_roll_6_Teamvariancepassingshare)],
method=c("center","scale"))
scaled_passingshare<-predict(scale_transform11,train[,.(Player_roll_6_Teamvariancepassingshare,TeamAllowed_roll_6_Teamvariancepassingshare)])
train$Passing_Var_Dif<-scaled_passingshare$Player_roll_6_Teamvariancepassingshare-scaled_passingshare$TeamAllowed_roll_6_Teamvariancepassingshare
#TargetVar
scale_transform12<-preProcess(train[,.(Player_roll_6_Teamvariancetargetshare,TeamAllowed_roll_6_Teamvariancetargetshare)],
method=c("center","scale"))
scaled_tgtshare<-predict(scale_transform12,train[,.(Player_roll_6_Teamvariancetargetshare,TeamAllowed_roll_6_Teamvariancetargetshare)])
train$Tgt_Var_Dif<-scaled_tgtshare$Player_roll_6_Teamvariancetargetshare-scaled_tgtshare$TeamAllowed_roll_6_Teamvariancetargetshare
#RushingShare
scale_transform13<-preProcess(train[,.(Player_roll_6_Rushing_share,TeamAllowed_roll_6_Rushing_share)],
method=c("center","scale"))
scaled_rushing<-predict(scale_transform13,train[,.(Player_roll_6_Rushing_share,TeamAllowed_roll_6_Rushing_share)])
train$Rushing_Share_Dif<-scaled_rushing$Player_roll_6_Rushing_share-scaled_rushing$TeamAllowed_roll_6_Rushing_share
#PassingShare
scale_transform14<-preProcess(train[,.(Player_roll_6_Passing_share,TeamAllowed_roll_6_Passing_share)],
method=c("center","scale"))
scaled_passing<-predict(scale_transform14,train[,.(Player_roll_6_Passing_share,TeamAllowed_roll_6_Passing_share)])
train$Passing_Share_Dif<-scaled_passing$Player_roll_6_Passing_share-scaled_passing$TeamAllowed_roll_6_Passing_share
#TargetShare
scale_transform15<-preProcess(train[,.(Player_roll_6_Tgt_share,TeamAllowed_roll_6_Tgt_share)],
method=c("center","scale"))
scaled_tgt<-predict(scale_transform15,train[,.(Player_roll_6_Tgt_share,TeamAllowed_roll_6_Tgt_share)])
train$Tgt_Share_Dif<-scaled_tgt$Player_roll_6_Tgt_share-scaled_tgt$TeamAllowed_roll_6_Tgt_share
#Write out train set to processed folder
fwrite(train, "./project/volume/data/processed/train(roll6).csv")
library(data.table)
library(caret)
#remove file if it already exists to not override the data
if (file.exists("./project/volume/data/processed/train(roll7).csv")) {
file.remove("./project/volume/data/processed/train(roll7).csv")}
playerstats<-fread("./project/volume/data/processed/playerstats(roll7).csv")
teamstats<-fread("./project/volume/data/processed/teamstats(roll7).csv")
playerstats<-playerstats[,.(season,week,Tm,Player,Pos,PPRFantasyPoints,game_id,Opponent,roll_7_PassingYds,roll_7_PassingTD,
roll_7_Int,roll_7_PassingAtt,roll_7_Cmp,roll_7_RushingAtt,roll_7_RushingYds,
roll_7_RushingTD,roll_7_Rec,roll_7_Tgt,roll_7_ReceivingYds,roll_7_ReceivingTD,
roll_7_FL,roll_7_PPRFantasyPoints,roll_7_Tgt_share,roll_7_Rushing_share,roll_7_Passing_share,
roll_7_Teamtotalpassingattempts,roll_7_Teamtotalrushingattempts,roll_7_Teamvariancepassingshare,
roll_7_Teamvariancerushingshare,roll_7_Teamvariancetargetshare)]
teamstats<-teamstats[,.(season,week,Tm,cumulativeweek,game_id,Opponent,roll_7_PassingYds,roll_7_PassingTD,roll_7_Int,
roll_7_PassingAtt, roll_7_Cmp,roll_7_RushingAtt,roll_7_RushingYds,roll_7_RushingTD,
roll_7_Rec,roll_7_Tgt,roll_7_ReceivingYds,roll_7_ReceivingTD,roll_7_FL,roll_7_Tgt_share,roll_7_Rushing_share,
roll_7_Passing_share,roll_7_Teamtotalpassingattempts,roll_7_Teamtotalrushingattempts,
roll_7_Teamvariancepassingshare,roll_7_Teamvariancerushingshare,roll_7_Teamvariancetargetshare)]
setnames(playerstats, c("roll_7_PassingYds","roll_7_PassingTD","roll_7_Int","roll_7_PassingAtt","roll_7_Cmp","roll_7_RushingAtt",
"roll_7_RushingYds","roll_7_RushingTD","roll_7_Rec","roll_7_Tgt","roll_7_ReceivingYds",
"roll_7_ReceivingTD","roll_7_FL","roll_7_PPRFantasyPoints","roll_7_Tgt_share","roll_7_Rushing_share",
"roll_7_Passing_share","roll_7_Teamtotalpassingattempts","roll_7_Teamtotalrushingattempts",
"roll_7_Teamvariancepassingshare","roll_7_Teamvariancerushingshare","roll_7_Teamvariancetargetshare"),
c("Player_roll_7_PassingYds", "Player_roll_7_PassingTD","Player_roll_7_Int","Player_roll_7_PassingAtt",
"Player_roll_7_Cmp","Player_roll_7_RushingAtt","Player_roll_7_RushingYds",
"Player_roll_7_RushingTD","Player_roll_7_Rec","Player_roll_7_Tgt",
"Player_roll_7_ReceivingYds","Player_roll_7_ReceivingTD","Player_roll_7_FL",
"Player_roll_7_PPRFantasyPoints","Player_roll_7_Tgt_share","Player_roll_7_Rushing_share",
"Player_roll_7_Passing_share","Player_roll_7_Teamtotalpassingattempts","Player_roll_7_Teamtotalrushingattempts",
"Player_roll_7_Teamvariancepassingshare","Player_roll_7_Teamvariancerushingshare",
"Player_roll_7_Teamvariancetargetshare"))
setnames(teamstats, c("roll_7_PassingYds","roll_7_PassingTD","roll_7_Int","roll_7_PassingAtt","roll_7_Cmp","roll_7_RushingAtt",
"roll_7_RushingYds","roll_7_RushingTD","roll_7_Rec","roll_7_Tgt","roll_7_ReceivingYds",
"roll_7_ReceivingTD","roll_7_FL","roll_7_Tgt_share","roll_7_Rushing_share",
"roll_7_Passing_share","roll_7_Teamtotalpassingattempts","roll_7_Teamtotalrushingattempts",
"roll_7_Teamvariancepassingshare","roll_7_Teamvariancerushingshare","roll_7_Teamvariancetargetshare"),
c("TeamAllowed_roll_7_PassingYds", "TeamAllowed_roll_7_PassingTD","TeamAllowed_roll_7_Int","TeamAllowed_roll_7_PassingAtt",
"TeamAllowed_roll_7_Cmp","TeamAllowed_roll_7_RushingAtt","TeamAllowed_roll_7_RushingYds",
"TeamAllowed_roll_7_RushingTD","TeamAllowed_roll_7_Rec","TeamAllowed_roll_7_Tgt",
"TeamAllowed_roll_7_ReceivingYds","TeamAllowed_roll_7_ReceivingTD","TeamAllowed_roll_7_FL",
"TeamAllowed_roll_7_Tgt_share","TeamAllowed_roll_7_Rushing_share","TeamAllowed_roll_7_Passing_share",
"TeamAllowed_roll_7_Teamtotalpassingattempts","TeamAllowed_roll_7_Teamtotalrushingattempts",
"TeamAllowed_roll_7_Teamvariancepassingshare","TeamAllowed_roll_7_Teamvariancerushingshare",
"TeamAllowed_roll_7_Teamvariancetargetshare"))
#Set Keys and Merge Together PlayerStats and Teamstats to create train set
setkey(playerstats,season,week,Tm,game_id,Opponent)
setkey(teamstats,season,week,Tm,game_id,Opponent)
train<-merge(playerstats,teamstats)
#Calculate difference values for applicable rows
#ReceivingYds
scale_transform<-preProcess(train[,.(Player_roll_7_ReceivingYds,TeamAllowed_roll_7_ReceivingYds)],
method=c("center","scale"))
scaled_receiving_yds<-predict(scale_transform,train[,.(Player_roll_7_ReceivingYds,TeamAllowed_roll_7_ReceivingYds)])
train$ReceivingYds_Dif<-scaled_receiving_yds$Player_roll_7_ReceivingYds-scaled_receiving_yds$TeamAllowed_roll_7_ReceivingYds
#RushingYds
scale_transform2<-preProcess(train[,.(Player_roll_7_RushingYds,TeamAllowed_roll_7_RushingYds)],
method=c("center","scale"))
scaled_rushing_yds<-predict(scale_transform2,train[,.(Player_roll_7_RushingYds,TeamAllowed_roll_7_RushingYds)])
train$RushingYds_Dif<-scaled_rushing_yds$Player_roll_7_RushingYds-scaled_rushing_yds$TeamAllowed_roll_7_RushingYds
#PassingYds
scale_transform3<-preProcess(train[,.(Player_roll_7_PassingYds,TeamAllowed_roll_7_PassingYds)],
method=c("center","scale"))
scaled_passing_yds<-predict(scale_transform3,train[,.(Player_roll_7_PassingYds,TeamAllowed_roll_7_PassingYds)])
train$PassingYds_Dif<-scaled_passing_yds$Player_roll_7_PassingYds-scaled_passing_yds$TeamAllowed_roll_7_PassingYds
#Targets
scale_transform4<-preProcess(train[,.(Player_roll_7_Tgt,TeamAllowed_roll_7_Tgt)],
method=c("center","scale"))
scaled_targets<-predict(scale_transform4,train[,.(Player_roll_7_Tgt,TeamAllowed_roll_7_Tgt)])
train$Targets_Dif<-scaled_targets$Player_roll_7_Tgt-scaled_targets$TeamAllowed_roll_7_Tgt
#PassingAttempts
scale_transform5<-preProcess(train[,.(Player_roll_7_PassingAtt,TeamAllowed_roll_7_PassingAtt)],
method=c("center","scale"))
scaled_passingattempts<-predict(scale_transform5,train[,.(Player_roll_7_PassingAtt,TeamAllowed_roll_7_PassingAtt)])
train$Passing_Attempts_Dif<-scaled_passingattempts$Player_roll_7_PassingAtt-scaled_passingattempts$TeamAllowed_roll_7_PassingAtt
#RushingAttempts
scale_transform6<-preProcess(train[,.(Player_roll_7_RushingAtt,TeamAllowed_roll_7_RushingAtt)],
method=c("center","scale"))
scaled_rushingattempts<-predict(scale_transform6,train[,.(Player_roll_7_RushingAtt,TeamAllowed_roll_7_RushingAtt)])
train$Rushing_Attempts_Dif<-scaled_rushingattempts$Player_roll_7_RushingAtt-scaled_rushingattempts$TeamAllowed_roll_7_RushingAtt
#ReceivingTDs
scale_transform7<-preProcess(train[,.(Player_roll_7_ReceivingTD,TeamAllowed_roll_7_ReceivingTD)],
method=c("center","scale"))
scaled_receivingtds<-predict(scale_transform7,train[,.(Player_roll_7_ReceivingTD,TeamAllowed_roll_7_ReceivingTD)])
train$ReceivingTDs_Dif<-scaled_receivingtds$Player_roll_7_ReceivingTD-scaled_receivingtds$TeamAllowed_roll_7_ReceivingTD
#RushingTDs
scale_transform8<-preProcess(train[,.(Player_roll_7_RushingTD,TeamAllowed_roll_7_RushingTD)],
method=c("center","scale"))
scaled_rushingtds<-predict(scale_transform8,train[,.(Player_roll_7_RushingTD,TeamAllowed_roll_7_RushingTD)])
train$RushingTDs_Dif<-scaled_rushingtds$Player_roll_7_RushingTD-scaled_rushingtds$TeamAllowed_roll_7_RushingTD
#PassingTDs
scale_transform9<-preProcess(train[,.(Player_roll_7_PassingTD,TeamAllowed_roll_7_PassingTD)],
method=c("center","scale"))
scaled_passingtds<-predict(scale_transform9,train[,.(Player_roll_7_PassingTD,TeamAllowed_roll_7_PassingTD)])
train$PassingTDs_Dif<-scaled_passingtds$Player_roll_7_PassingTD-scaled_passingtds$TeamAllowed_roll_7_PassingTD
#RushingVar
scale_transform10<-preProcess(train[,.(Player_roll_7_Teamvariancerushingshare,TeamAllowed_roll_7_Teamvariancerushingshare)],
method=c("center","scale"))
scaled_rushingshare<-predict(scale_transform10,train[,.(Player_roll_7_Teamvariancerushingshare,TeamAllowed_roll_7_Teamvariancerushingshare)])
train$Rushing_Var_Dif<-scaled_rushingshare$Player_roll_7_Teamvariancerushingshare-scaled_rushingshare$TeamAllowed_roll_7_Teamvariancerushingshare
#PassingVar
scale_transform11<-preProcess(train[,.(Player_roll_7_Teamvariancepassingshare,TeamAllowed_roll_7_Teamvariancepassingshare)],
method=c("center","scale"))
scaled_passingshare<-predict(scale_transform11,train[,.(Player_roll_7_Teamvariancepassingshare,TeamAllowed_roll_7_Teamvariancepassingshare)])
train$Passing_Var_Dif<-scaled_passingshare$Player_roll_7_Teamvariancepassingshare-scaled_passingshare$TeamAllowed_roll_7_Teamvariancepassingshare
#TargetVar
scale_transform12<-preProcess(train[,.(Player_roll_7_Teamvariancetargetshare,TeamAllowed_roll_7_Teamvariancetargetshare)],
method=c("center","scale"))
scaled_tgtshare<-predict(scale_transform12,train[,.(Player_roll_7_Teamvariancetargetshare,TeamAllowed_roll_7_Teamvariancetargetshare)])
train$Tgt_Var_Dif<-scaled_tgtshare$Player_roll_7_Teamvariancetargetshare-scaled_tgtshare$TeamAllowed_roll_7_Teamvariancetargetshare
#RushingShare
scale_transform13<-preProcess(train[,.(Player_roll_7_Rushing_share,TeamAllowed_roll_7_Rushing_share)],
method=c("center","scale"))
scaled_rushing<-predict(scale_transform13,train[,.(Player_roll_7_Rushing_share,TeamAllowed_roll_7_Rushing_share)])
train$Rushing_Share_Dif<-scaled_rushing$Player_roll_7_Rushing_share-scaled_rushing$TeamAllowed_roll_7_Rushing_share
#PassingShare
scale_transform14<-preProcess(train[,.(Player_roll_7_Passing_share,TeamAllowed_roll_7_Passing_share)],
method=c("center","scale"))
scaled_passing<-predict(scale_transform14,train[,.(Player_roll_7_Passing_share,TeamAllowed_roll_7_Passing_share)])
train$Passing_Share_Dif<-scaled_passing$Player_roll_7_Passing_share-scaled_passing$TeamAllowed_roll_7_Passing_share
#TargetShare
scale_transform15<-preProcess(train[,.(Player_roll_7_Tgt_share,TeamAllowed_roll_7_Tgt_share)],
method=c("center","scale"))
scaled_tgt<-predict(scale_transform15,train[,.(Player_roll_7_Tgt_share,TeamAllowed_roll_7_Tgt_share)])
train$Tgt_Share_Dif<-scaled_tgt$Player_roll_7_Tgt_share-scaled_tgt$TeamAllowed_roll_7_Tgt_share
#Write out train set to processed folder
fwrite(train, "./project/volume/data/processed/train(roll7).csv")
library(data.table)
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
#read in data
train<-fread("./project/volume/data/processed/train(roll3).csv")
#read in hyperparameter data
param_table<-fread("./project/src/models/hyperparametertuning.csv")
sample_pos<-"WR"
train<-train[Pos== sample_pos]
#Create Multiple Training and Testing Sets
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=train1)
x_train<-predict(dummies, newdata = train1)
x_test<-predict(dummies, newdata = test1)
#Create proper representation of data for modeling
dtrain <- xgb.DMatrix(x_train,label=train1_y,missing=NA)
dtest <- xgb.DMatrix(x_test,label=test_y,missing=NA)
#read in hyperparameter data
path1<-fread("./project/src/models/hyperparametertuning.csv")
param_table<-list.files(path1)
path1<-"./project/src/models/hyperparametertuning.csv"
param_table<-list.files(path1)
library(data.table)
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
#read in data
train<-fread("./project/volume/data/processed/train(roll3).csv")
#read in hyperparameter data
path1<-"./project/src/models/hyperparametertuning.csv"
param_table<-list.files(path1)
sample_pos<-"WR"
train<-train[Pos== sample_pos]
#Create Multiple Training and Testing Sets
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=train1)
x_train<-predict(dummies, newdata = train1)
x_test<-predict(dummies, newdata = test1)
#Create proper representation of data for modeling
dtrain <- xgb.DMatrix(x_train,label=train1_y,missing=NA)
dtest <- xgb.DMatrix(x_test,label=test_y,missing=NA)
library(data.table)
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
#read in data
train<-fread("./project/volume/data/processed/train(roll3).csv")
#read in hyperparameter data
path1<-"./project/src/models/hyperparametertuning.csv"
param_table<-list.files(path1)
sample_pos<-"WR"
train<-train[Pos== sample_pos]
#Create Multiple Training and Testing Sets
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=train1)
x_train<-predict(dummies, newdata = train1)
x_test<-predict(dummies, newdata = test1)
#Create proper representation of data for modeling
dtrain <- xgb.DMatrix(x_train,label=train1_y,missing=NA)
dtest <- xgb.DMatrix(x_test,label=test_y,missing=NA)
library(data.table)
#read in path of where data is located and list files in that path
path1<-"./project/volume/data/external/external_data/weekly"
year_files<- list.files(path1)
#remove file if it already exists to not overrid
library(data.table)
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
#read in data
train<-fread("./project/volume/data/processed/train(roll3).csv")
#read in hyperparameter data
param_table<-fread("./project/src/models/hyperparametertuning.csv")
sample_pos<-"WR"
train<-train[Pos== sample_pos]
#Create Multiple Training and Testing Sets
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=train1)
x_train<-predict(dummies, newdata = train1)
x_test<-predict(dummies, newdata = test1)
#Create proper representation of data for modeling
dtrain <- xgb.DMatrix(x_train,label=train1_y,missing=NA)
dtest <- xgb.DMatrix(x_test,label=test_y,missing=NA)
for (i in 1:length(param_table)) {
#Define XGboost model and parameters
param <- list(  objective           = "reg:linear",
gamma               =param_table$gamma[i],
booster             = "gbtree",
eval_metric         = "rmse",
eta                 = param_table$eta[i],
max_depth           = param_table$max_depth[i],
min_child_weight    = param_table$min_child_weight[i],
subsample           = param_table$subsample[i],
colsample_bytree    =param_table$colsample_bytree[i],
tree_method = 'hist'
)
#Add the watchlist
watchlist <- list(train = dtrain, test = dtest)
null_y<-mean(train1_y)
rmse(test_y,null_y)
rollingfantasypoint_y<-test1$Player_roll_4_PPRFantasyPoints/4
rollingfantasypoint_y[is.na(rollingfantasypoint_y)]<-null_y
rmse(test_y, rollingfantasypoint_y)
#Create Predictions
XGB_model<-xgb.train(params=param,nrounds=10000,missing=NA,data=dtrain,watchlist=watchlist,print_every_n=1,nthread=4,
early_stopping_rounds=25)
#Write out hyperparameters so they can be compared
best_ntrees<-unclass(XGB_model)$best_iteration
train_param<-data.table(t(param))
train_param$best_ntrees<-best_ntrees
train_error<-unclass(XGB_model)$evaluation_log[as.numeric(best_ntrees),]$train_rmse
train_param$train_error<-train_error
test_error<-unclass(XGB_model)$evaluation_log[as.numeric(best_ntrees),]$test_rmse
train_param$test_error<-test_error
fwrite(train_param, "./project/src/models/trainingHyperparametersWR(roll3).csv", append = T)
