check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
}
View(check)
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
i = i+1
}
View(check)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
}
else {
check$PredPointsNull<-FALSE
}
i = i+1
}
View(check)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index[i] <- i
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
}
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.null(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
}
check<-data.table()
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else{
check$PredNotNull[i] <-1
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
for (i in 1:nrow(modeldata)) {
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
}
check<-data.table()
i<-1
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
View(check)
check<-data.table()
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
}
else {
check$PredPointsNull[i]<-FALSE
}
check<-data.table()
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
i<-1
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
} else {
check$PredPointsNull[i]<-FALSE
}
View(check)
i<-2
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
} else {
check$PredPointsNull[i]<-FALSE
}
is.na(modeldata$PredPoints[2])
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index[i] <-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull[i] <- i
} else {
check$PredPointsNull[i]<-FALSE
}
final<-rbind(final,check)
}
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
} else {
check$PredPointsNull<-FALSE
}
final<-rbind(final,check)
}
View(final)
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
check$Value <- modeldata$PredPoints[i]
if (is.na(modeldata$PredPoints[i])) {
check$PredPointsNull <- i
} else {
check$PredPointsNull<-FALSE
}
final<-rbind(final,check)
}
View(final)
is.numeric(modeldata$PredPoints[3])
check<-data.table()
final<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
check$Value <- modeldata$PredPoints[i]
if (is.numeric(modeldata$PredPoints[i])) {
check$PredPointsNumeric <- i
} else {
check$PredPointsNumeric<-FALSE
}
final<-rbind(final,check)
}
View(check)
unique(final$PredPointsNumeric)
check<-data.table()
PredPointsfinal<-NULL
for (i in 1:nrow(modeldata)) {
check$Index<-i
check$Value <- modeldata$PredPoints[i]
if (is.numeric(modeldata$PredPoints[i])) {
check$PredPointsNumeric <- i
} else {
check$PredPointsNumeric<-FALSE
}
PredPointsfinal<-rbind(PredPointsfinal,check)
}
temp1<-data.table()
Salaryfinal<-NULL
for (i in 1:nrow(modeldata)) {
temp1$Index<-i
temp1$Value <- modeldata$DKsalary[i]
if (is.numeric(modeldata$DKsalary[i])) {
temp1$DKSalaryNumeric <- i
} else {
temp1$DKSalaryNumeric<-FALSE
}
Salaryfinal<-rbind(Salaryfinal,check)
}
View(Salaryfinal)
temp1<-data.table()
Salaryfinal<-NULL
for (i in 1:nrow(modeldata)) {
temp1$Index<-i
temp1$Value <- modeldata$DKsalary[i]
if (is.numeric(modeldata$DKsalary[i])) {
temp1$DKSalaryNumeric <- i
} else {
temp1$DKSalaryNumeric<-FALSE
}
Salaryfinal<-rbind(Salaryfinal,temp1)
}
View(Salaryfinal)
temp2<-data.table()
SalaryNA<-NULL
for (i in 1:nrow(modeldata)) {
temp2$Index<-i
temp2$Value <- modeldata$DKsalary[i]
if (is.na(modeldata$DKsalary[i])) {
temp1$DKSalaryNA <- i
} else {
temp1$DKSalaryNA<-FALSE
}
SalaryNA<-rbind(SalaryNA,temp2)
}
View(SalaryNA)
View(Salaryfinal)
View(SalaryNA)
temp2<-data.table()
SalaryNA<-NULL
for (i in 1:nrow(modeldata)) {
temp2$Index<-i
temp2$Value <- modeldata$DKsalary[i]
if (is.na(modeldata$DKsalary[i])) {
temp1$DKSalaryNA <- i
} else {
temp1$DKSalaryNA<-0
}
SalaryNA<-rbind(SalaryNA,temp2)
}
View(SalaryNA)
temp2<-data.table()
SalaryNA<-NULL
SalaryNA<-NULL
for (i in 1:nrow(modeldata)) {
temp2$Index<-i
temp2$Value <- modeldata$DKsalary[i]
if (is.na(modeldata$DKsalary[i])) {
temp2$DKSalaryNA <- i
} else {
temp2$DKSalaryNA<-0
}
SalaryNA<-rbind(SalaryNA,temp2)
}
View(SalaryNA)
unique(SalaryNA$DKSalaryNA)
Salary<-cbind(Salaryfinal, SalaryNA)
View(Salary)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
library(Metrics)
library(caret)
library(data.table)
library(glmnet)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
modeldata[is.na(modeldata$PredPoints)]$PredPoints<-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints<-0
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE, na.rm = T)
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
train <- data[trainIndex,] #training data (75% of data)
test <- data[-trainIndex,] #testing data (25% of data)
#splitting data into training/testing data using the trainIndex object
train <- modeldata[trainIndex,] #training data (75% of data)
test <- modeldata[-trainIndex,] #testing data (25% of data)
x<-modeldata[,.(DKpoints,PredPoints)]
y_train<-modeldata$DKsalary
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
x<-na.omit(x)
y_train<-na.omit(y_train)
x = as.matrix(x)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
modeldata[is.na(modeldata$PredPoints)]$PredPoints<-0
modeldata[is.na(modeldata$DKsalary)]$DKsalary<-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints<-0
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
train <- modeldata[trainIndex,] #training data (75% of data)
test <- modeldata[-trainIndex,] #testing data (25% of data)
x<-modeldata[,.(DKpoints,PredPoints)]
y_train<-modeldata$DKsalary
x = as.matrix(x)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
modeldata[is.na(modeldata$PredPoints)]$PredPoints<-0
modeldata[is.na(modeldata$DKsalary)]$DKsalary<-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints<-0
#Set seed for randomization
set.seed(123)
#creating index so data can be split into train and test
trainIndex <- createDataPartition(modeldata$DKpoints,p=0.75,list=FALSE)
#splitting data into training/testing data using the trainIndex object
train <- modeldata[trainIndex,] #training data (75% of data)
test <- modeldata[-trainIndex,] #testing data (25% of data)
x_train<-train[,.(DKpoints,PredPoints)]
y_train<-train$DKsalary
x_train = as.matrix(x_train)
#Cross validation
lambdas <- 10^seq(2, -3, by = -.1)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
cv_ridge <- cv.glmnet(x_train, y_train, alpha = 0, lambda = lambdas, na.action = na.omit)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
#Training
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = optimal_lambda)
#Training
ridge_reg = glmnet(x_train, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = optimal_lambda)
summary(ridge_reg)
predictions = predict(glmnet, newdata = test)
predictions = predict(ridge_reg, newdata = test)
rolltime<-"roll6"
pos<-"QB"
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
library(optparse)
library(data.table)
pos<-"QB"
rolltime<-"roll6"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
train[train$Pos=="HB"]$Pos<-"RB"
train<-train[order(season,week)]
sample_pos<-pos
train<-train[Pos==sample_pos]
train1<-train[season==2016]
test1<-train[season==2017]
#Create output data table which is a subset of the columns of test1
output<-test1[,.(season,week,cumulativeweek,Tm,game_id,Opponent,Player,Pos,PPRFantasyPoints)]
output<-output[order(season,week)]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Fix game status columns in train1 to remove null values
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
#Fix game status columns in test1 to remove null values
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
#Find zero variance columns and remove them
summaryvar<-nearZeroVar(train1,saveMetrics = T)
injurycols<-rownames(summaryvar)
summaryvar<-data.table(summaryvar)
summaryvar$columnames<-injurycols
zerovarcols<-summaryvar[zeroVar==T]
novardrops<-zerovarcols$columnames
train1<-train1[, !novardrops, with = FALSE]
test1<-test1[, !novardrops, with = FALSE]
#Create column to discern between train and test data for after they are split
train1$train<-1
test1$train<-0
#Create master set of train and test
master<-rbind(train1,test1)
#Create categorical levels for variables before dummy creation
col_type<-sapply(master, class)
char_cols<-names(col_type[col_type=="character"])
master[,(char_cols):=lapply(.SD, as.factor),.SDcols=char_cols]
#Split factorized data back into train and test for dummy creation
m_test<-master[train==0]
m_train<-master[train==1]
#Remove train column as it is no longer needed
m_test$train<-NULL
m_train$train<-NULL
master$train<-NULL
rolltime<-"roll5"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
train[train$Pos=="HB"]$Pos<-"RB"
train<-train[order(season,week)]
sample_pos<-pos
train<-train[Pos==sample_pos]
train1<-train[season==2016]
test1<-train[season==2017]
#Create output data table which is a subset of the columns of test1
output<-test1[,.(season,week,cumulativeweek,Tm,game_id,Opponent,Player,Pos,PPRFantasyPoints)]
output<-output[order(season,week)]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Fix game status columns in train1 to remove null values
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
#Fix game status columns in test1 to remove null values
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
#Find zero variance columns and remove them
summaryvar<-nearZeroVar(train1,saveMetrics = T)
injurycols<-rownames(summaryvar)
summaryvar<-data.table(summaryvar)
summaryvar$columnames<-injurycols
zerovarcols<-summaryvar[zeroVar==T]
novardrops<-zerovarcols$columnames
train1<-train1[, !novardrops, with = FALSE]
test1<-test1[, !novardrops, with = FALSE]
#Create column to discern between train and test data for after they are split
train1$train<-1
test1$train<-0
#Create master set of train and test
master<-rbind(train1,test1)
#Create categorical levels for variables before dummy creation
col_type<-sapply(master, class)
char_cols<-names(col_type[col_type=="character"])
master[,(char_cols):=lapply(.SD, as.factor),.SDcols=char_cols]
#Split factorized data back into train and test for dummy creation
m_test<-master[train==0]
m_train<-master[train==1]
#Remove train column as it is no longer needed
m_test$train<-NULL
m_train$train<-NULL
master$train<-NULL
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
library(Metrics)
library(caret)
library(data.table)
library(glmnet)
#Read in  data
data<-fread("./project/volume/data/teamconstruction/packingdata.csv")
modeldata<-data[,.(PredPoints,`DK salary`,`DK points`)]
setnames(modeldata, c("DK points","DK salary"), c("DKpoints","DKsalary"))
modeldata[is.na(modeldata$PredPoints)]$PredPoints<-0
modeldata[is.na(modeldata$DKsalary)]$DKsalary<-0
modeldata[is.na(modeldata$DKpoints)]$DKpoints<-0
