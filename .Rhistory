booster             = "gbtree",
eval_metric         = "rmse",
eta                 = param_table$eta[i],
max_depth           = param_table$max_depth[i],
min_child_weight    = param_table$min_child_weight[i],
subsample           = param_table$subsample[i],
colsample_bytree    =param_table$colsample_bytree[i],
tree_method = 'hist'
)
#Cross Validation
XGB_cv<-xgb.cv(params=param,nrounds=10000,nfold=5,missing=NA,data=dtrain,print_every_n=1,nthread=4,
early_stopping_rounds=25)
#removed test = dtest and put after the cross validation (potential bug fix)
watchlist <- list(train = dtrain)
#Create Predictions
XGB_model<-xgb.train(params=param,nrounds= XGB_cv$best_iteration,missing=NA,data=dtrain,watchlist=watchlist,
print_every_n=1,nthread=4)
#Write out hyperparameters so they can be compared
best_ntrees<-XGB_cv$best_iteration
train_param<-data.table(t(param))
train_param$best_ntrees<-best_ntrees
train_error<-unclass(XGB_model)$evaluation_log[as.numeric(best_ntrees),]$train_rmse
train_param$train_error<-train_error
pred<-predict(XGB_model, newdata=dtest)
train_param$test_error_train<-rmse(test_y, pred)
train_param$cv_error<-XGB_cv$evaluation_log[XGB_cv$best_iteration]$test_rmse_mean
path3<-"./project/src/models/HyperParams/Hyperparams"
path4<-paste0(path3,pos)
path5<-paste0(path4,rolltime,".csv")
fwrite(train_param,path5, append = T)
modelpath<-paste0('./project/volume/models/',rolltime,'_',pos,"_hyperparam_",i,".model")
saveRDS(XGB_model, modelpath)
}
best_hyper_index<-which(train_param$cv_error==min(train_param$cv_error))
modelpath<-paste0('./project/volume/models/',rolltime,'_',pos,"_hyperparam_",best_hyper_index,".model")
XGB_model<-readRDS(modelpath)
plotfile<-paste0("./project/volume/data/importanceplots/",rolltime,'_',pos,".pdf")
pdf(plotfile)
cols<-XGB_model[["feature_names"]]
importance <- xgb.importance(feature_names = cols, model = XGB_model)
xgb.plot.importance(importance_matrix = importance, top_n = 50)
dev.off()
?predict
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
library(optparse)
library(data.table)
rolltime<-'roll3'
pos<-"QB"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
train[train$Pos=="HB"]$Pos<-"RB"
sample_pos<-pos
train<-train[Pos==sample_pos]
train1<-train[season==2016]
test1<-train[season==2017]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
output<-test1[,.(season,Tm,game_id,Opponent,Player,Pos,cumulativeweek,PPRFantasyPoints)]
View(output)
rolltime<-"roll3"
pos<-"QB"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
train[train$Pos=="HB"]$Pos<-"RB"
sample_pos<-pos
train<-train[Pos==sample_pos]
train1<-train[season==2016]
test1<-train[season==2017]
output<-test1[,.(season,Tm,game_id,Opponent,Player,Pos,cumulativeweek,PPRFantasyPoints)]
View(output)
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Fix game status columns in train1 to remove null values
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
#Fix game status columns in test1 to remove null values
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
#Find zero variance columns and remove them
summaryvar<-nearZeroVar(train1,saveMetrics = T)
injurycols<-rownames(summaryvar)
summaryvar<-data.table(summaryvar)
summaryvar$columnames<-injurycols
zerovarcols<-summaryvar[zeroVar==T]
novardrops<-zerovarcols$columnames
train1<-train1[, !novardrops, with = FALSE]
test1<-test1[, !novardrops, with = FALSE]
#Create column to discern between train and test data for after they are split
train1$train<-1
test1$train<-0
#Create master set of train and test
master<-rbind(train1,test1)
#Create categorical levels for variables before dummy creation
col_type<-sapply(master, class)
char_cols<-names(col_type[col_type=="character"])
master[,(char_cols):=lapply(.SD, as.factor),.SDcols=char_cols]
#Split factorized data back into train and test for dummy creation
m_test<-master[train==0]
m_train<-master[train==1]
#Remove train column as it is no longer needed
m_test$train<-NULL
m_train$train<-NULL
master$train<-NULL
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
x_train<-predict(dummies, newdata = m_train)
x_test<-predict(dummies, newdata = m_test)
#Create proper representation of data for modeling
dtrain <- xgb.DMatrix(x_train,label=train1_y,missing=NA)
dtest <- xgb.DMatrix(x_test,missing=NA)
View(test1)
rolltime<-"roll3"
pos<-"QB"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
View(train)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
train[train$Pos=="HB"]$Pos<-"RB"
train<-train[order(season,week)]
View(train)
sample_pos<-pos
train<-train[Pos==sample_pos]
train1<-train[season==2016]
test1<-train[season==2017]
View(test1)
View(train1)
output<-test1[,.(season,Tm,game_id,Opponent,Player,Pos,week,cumulativeweek,PPRFantasyPoints)]
output<-output[order(season,week)]
View(output)
output<-test1[,.(season,week,cumulativeweekTm,game_id,Opponent,Player,Pos,PPRFantasyPoints)]
output<-test1[,.(season,week,cumulativeweek,Tm,game_id,Opponent,Player,Pos,PPRFantasyPoints)]
output<-output[order(season,week)]
View(output)
rolltime<-"roll3"
pos<-"QB"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
train
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
train[train$Pos=="HB"]$Pos<-"RB"
train<-train[order(season,week)]
sample_pos<-pos
train<-train[Pos==sample_pos]
train1<-train[season==2016]
test1<-train[season==2017]
#Create output data table which is a subset of the columns of test1
output<-test1[,.(season,week,cumulativeweek,Tm,game_id,Opponent,Player,Pos,PPRFantasyPoints)]
output<-output[order(season,week)]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Fix game status columns in train1 to remove null values
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
#Fix game status columns in test1 to remove null values
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
#Find zero variance columns and remove them
summaryvar<-nearZeroVar(train1,saveMetrics = T)
injurycols<-rownames(summaryvar)
summaryvar<-data.table(summaryvar)
summaryvar$columnames<-injurycols
zerovarcols<-summaryvar[zeroVar==T]
novardrops<-zerovarcols$columnames
train1<-train1[, !novardrops, with = FALSE]
test1<-test1[, !novardrops, with = FALSE]
#Create column to discern between train and test data for after they are split
train1$train<-1
test1$train<-0
#Create master set of train and test
master<-rbind(train1,test1)
#Create categorical levels for variables before dummy creation
col_type<-sapply(master, class)
char_cols<-names(col_type[col_type=="character"])
master[,(char_cols):=lapply(.SD, as.factor),.SDcols=char_cols]
#Split factorized data back into train and test for dummy creation
m_test<-master[train==0]
m_train<-master[train==1]
#Remove train column as it is no longer needed
m_test$train<-NULL
m_train$train<-NULL
master$train<-NULL
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
x_train<-predict(dummies, newdata = m_train)
x_test<-predict(dummies, newdata = m_test)
#Create proper representation of data for modeling
dtrain <- xgb.DMatrix(x_train,label=train1_y,missing=NA)
dtest <- xgb.DMatrix(x_test,missing=NA)
i<-11
param <- list(  objective           = "reg:linear",
gamma               =param_table$gamma[i],
booster             = "gbtree",
eval_metric         = "rmse",
eta                 = param_table$eta[i],
max_depth           = param_table$max_depth[i],
min_child_weight    = param_table$min_child_weight[i],
subsample           = param_table$subsample[i],
colsample_bytree    =param_table$colsample_bytree[i],
tree_method = 'hist'
)
#Cross Validation
XGB_cv<-xgb.cv(params=param,nrounds=10000,nfold=5,missing=NA,data=dtrain,print_every_n=1,nthread=4,
early_stopping_rounds=25)
#removed test = dtest and put after the cross validation (potential bug fix)
watchlist <- list(train = dtrain)
#Create Predictions
XGB_model<-xgb.train(params=param,nrounds= XGB_cv$best_iteration,missing=NA,data=dtrain,watchlist=watchlist,
print_every_n=1,nthread=4)
best_ntrees<-XGB_cv$best_iteration
train_param<-data.table(t(param))
train_param$best_ntrees<-best_ntrees
train_error<-unclass(XGB_model)$evaluation_log[as.numeric(best_ntrees),]$train_rmse
train_param$train_error<-train_error
pred<-predict(XGB_model, newdata=dtest)
train_param$test_error_train<-rmse(test_y, pred)
train_param$cv_error<-XGB_cv$evaluation_log[XGB_cv$best_iteration]$test_rmse_mean
path3<-"./project/src/models/HyperParams/Hyperparams"
path4<-paste0(path3,pos)
path5<-paste0(path4,rolltime,"2016train",".csv")
fwrite(train_param,path5, append = T)
#Create Predictions
pred<-predict(XGB_model, newdata=dtest)
#Add predictions to output data table as new column, PredPoints
output$PredPoints<-pred
View(output)
#Write out output table to teamconstruction folder, where it can be used to aid in team construction
fwrite(output,"./project/volume/data/teamconstruction/",rolltime,"_",pos,".csv")
#Write out output table to teamconstruction folder, where it can be used to aid in team construction
teampath<-paste0("./project/volume/data/teamconstruction/",rolltime,"_",pos,".csv")
teampath
fwrite(output,teampath)
ininstall.packages("reticulate")
install.packages("reticulate")
library(reticulate)
reticulate::repl_python()
library(reticulate)
library(reticulate)
use_python = ("/usr/bin/python")
library(reticulate)
use_python = ("./anaconda3/lib/python3.7")
library(reticulate)
use_python = ("./anaconda3/lib/python3.7")
reticulate::repl_python()
library(purrr)
library(rvest)
library(data.table)
library(stringr)
library(tidyr)
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
s<-1
w<-1
s<-2015
temp$link<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
View(result)
result$link
seasons[s]
s
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
s<-"2014"
w<-1
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
View(result)
result$link
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
s<-'2014'
w<-1
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(s)
temp$week<-weeks[w]
result<-rbind(result,temp)
View(result)
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(s)
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
View(result)
seasons[s]
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(sesaons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",s,"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
View(result)
result$link[119]
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
View(result)
result$link[111]
result$link[2]
#Get rid of any potential empty values from result
result<-compact(result)
#Split result into a list with 3 pieces (link, season, week)
result<-split(result, result$link)
result$`http://rotoguru1.com/cgi-bin/fyday.pl?week=1&year=2014&game=dk`
i<2
i<-2
result[i]
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
View(result)
result[14]
Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
#Split result into a list with 3 pieces (link, season, week)
result<-split(result, result$link)
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
View(result)
result[22]
final<-data.table()
i<-1
page<-read_html(result[i])
result<-list(result)
View(result)
page<-read_html(result[i])
?read_html
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-NULL
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk")
result<-rbind(result,temp)
}
}
View(result)
#Get rid of any potential empty values from result
result<-compact(result)
i<1
i<-1
page<-read_html(result[i])
View(page)
data<-page%>%html_nodes("pre")%>%html_text()
final<-rbind(data,final)
final<-data.table()
final<-rbind(data,final)
#Declare variables and empty data tables
path1<-("http://rotoguru1.com/cgi-bin/fyday.pl?week=")
seasons<-c("2014", "2015", "2016","2017","2018","2019","2020")
weeks<-1:17
result<-NULL
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp<- paste0(path1, as.character(w),"&year=",seasons[s],"&game=dk&scsv=1")
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
final<-data.table()
i<-1
page<-read_html(result[i])
data<-page%>%html_nodes("pre")%>%html_text()
final<-rbind(data,final)
View(final)
data
data[2]
data[2]
data[3]
?html_node
final
View(final)
?split()
page<-read_html(result[i])
data<-page%>%html_nodes("pre")
View(data)
final<-rbind(data,final)
