file.remove(path2)}
NFLvalues<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt",
"RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL", "Tgt_share","Rushing_share","Passing_share", "Teamtotalpassingattempts",
"Teamtotalrushingattempts","Teamvariancetargetshare","Teamvariancerushingshare","Teamvariancepassingshare",
"PPRFantasyPoints","StandardFantasyPoints","HalfPPRFantasyPoints")
setkey(player_achieved,Player,cumulativeweek)
for (i in 1:length(NFLvalues)) {
player_achieved[, new_column := Reduce(`+`, shift(get(NFLvalues[i]), 1:numweeks))]
setnames(player_achieved,"new_column",paste0(rolltime,NFLvalues[i]))
}
fwrite(player_achieved, path2)
#Remove file if file already exists
if (file.exists("./project/volume/data/interim/injuryreports.csv")) {
file.remove("./project/volume/data/interim/injuryreports.csv")}
#Declare variables and empty data tables
path1<-("https://www.footballdb.com/transactions/injuries.html?yr=")
seasons<-c("2016", "2017", "2020")
weeks<-1:17
result<-data.table()
temp<-NULL
#Use nested for loops to get the url, season, and week for each webpage of interest, store in result data table
for(s in 1:length(seasons)){
for(w in 1:length(weeks)){
temp$link<- paste0(path1, seasons[s],"&wk=", as.character(w), "&type=reg")
temp$season<-as.numeric(seasons[s])
temp$week<-weeks[w]
result<-rbind(result,temp)
}
}
#Get rid of any potential empty values from result
result<-compact(result)
#Split result into a list with 3 pieces (link, season, week)
result<-split(result, result$link)
#Create final data table with all injury information
DT <- map_df(result, function(x){
page <- read_html(x[[1]])
data.table(
season = x[[2]],
week = x[[3]],
Player = page %>% html_nodes('.divtable .td:nth-child(1) b') %>% html_text(),
Injury = page %>% html_nodes('.divtable .td:nth-child(2)') %>% html_text(),
Wed = page %>% html_nodes('.divtable .td:nth-child(3)') %>% html_text(),
Thu = page %>% html_nodes('.divtable .td:nth-child(4)') %>% html_text(),
Fri = page %>% html_nodes('.divtable .td:nth-child(5)') %>% html_text(),
GameStatus = page %>% html_nodes('.divtable .td:nth-child(6)') %>% html_text()
)
}
)
#Order by season and week
DT<-DT[order(season,week)]
#Remove everything from DT$GameStatus except for status
DT$GameStatus<-gsub("[0-9]","",DT$GameStatus)
DT$GameStatus<-gsub("[()]","",DT$GameStatus)
DT$GameStatus<-gsub("vs","",DT$GameStatus)
DT$GameStatus<-gsub("[@]","",DT$GameStatus)
DT$GameStatus<-gsub("[/]","",DT$GameStatus)
DT$GameStatus<-str_sub(DT$GameStatus, 1, str_length(DT$GameStatus)-3)
DT$GameStatus<-gsub(" ", "", DT$GameStatus)
#Remove -- values in each of the columns
DT[DT$GameStatus == "--"]$GameStatus<-NA
DT[DT$season == "--"]$season<-NA
DT[DT$week == "--"]$week<-NA
DT[DT$Player == "--"]$Player<-NA
DT[DT$Wed == "--"]$Wed<-NA
DT[DT$Thu == "--"]$Thu<-NA
DT[DT$Fri == "--"]$Fri<-NA
DT[DT$Injury == "--"]$Injury<-NA
#Set all injuries to lowercase to help get rid of duplicates
DT$Injury<-tolower(DT$Injury)
#Create ID column for DT
DT$id<-1:nrow(DT)
#Split Injury Column into multiple injuries creating dummy variables
types_tab<-as.data.table(tstrsplit(DT$Injury,","))
types_tab$id<-DT$id
m_types_tab<-melt(types_tab,id.vars = "id")
m_types_tab$value<-trimws(m_types_tab$value, which = "both")
m_types_tab$value<-gsub(" ", "_",m_types_tab$value)
m_types_tab$value<-gsub("/", "_",m_types_tab$value)
m_types_tab$value<-gsub("-", "", m_types_tab$value)
m_types_tab<-m_types_tab[!is.na(m_types_tab$value)]
m_types_tab$True<-1
types_tab<-dcast(m_types_tab,id ~ value,length,value.var="True")
#Merge tables together into one big table
InjuryTable<-merge(DT,types_tab, by = "id")
#Get rid of columns not of interest
drops<-c("id","Injury")
InjuryTable<-InjuryTable[, !drops, with = FALSE]
#Write out injury data table
fwrite(InjuryTable,"./project/volume/data/interim/injuryreports.csv")
#remove file if it already exists to not override the data
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
if (file.exists(path2)) {
file.remove(path2)}
path3 <- "./project/volume/data/processed/playerstats"
path4 <- "./project/volume/data/processed/teamstats"
path5 <- paste0(path3,rolltime,".csv")
path6 <- paste0(path4,rolltime,".csv")
playerstats<-fread(path5)
teamstats<-fread(path6)
playerdrops<-c("StandardFantasyPoints","HalfPPRFantasyPoints","Tmscore","Opponentscore","cumulativeweek", "PassingYds",
"PassingTD","Int","PassingAtt","Cmp","RushingAtt","RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL","Tgt_share","Rushing_share","Passing_share","Teamtotalpassingattempts","Teamtotalrushingattempts",
"Teamvariancepassingshare","Teamvariancerushingshare","Teamvariancetargetshare",
paste0("roll",numweeks,"StandardFantasyPoints"), paste0("roll",numweeks,"HalfPPRFantasyPoints"))
teamdrops<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt","RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL","Tgt_share","Rushing_share","Passing_share","Teamtotalpassingattempts","Teamtotalrushingattempts",
"Teamvariancepassingshare","Teamvariancerushingshare","Teamvariancetargetshare", "PPRFantasyPoints",
"StandardFantasyPoints", "HalfPPRFantasyPoints",paste0("roll",numweeks,"StandardFantasyPoints"),
paste0("roll",numweeks,"HalfPPRFantasyPoints"),paste0("roll",numweeks,"PPRFantasyPoints"))
playerstats<-playerstats[,!playerdrops,with = FALSE]
teamstats<-teamstats[,!teamdrops,with=FALSE]
#Set Names
player_roll_names<-names(playerstats)[grep("roll",names(playerstats))]
new_names<-paste0("Player",player_roll_names)
setnames(playerstats, player_roll_names, new_names)
team_roll_names<-names(teamstats)[grep("roll",names(teamstats))]
new_team_names<-paste0("TeamAllowed",team_roll_names)
setnames(teamstats, team_roll_names, new_team_names)
#Set Keys and Merge Together PlayerStats and Teamstats to create train set
setkey(playerstats,season,week,Tm,game_id,Opponent)
setkey(teamstats,season,week,Tm,game_id,Opponent)
train<-merge(playerstats,teamstats)
#make a value list
statslist<- c("ReceivingYds","RushingYds","PassingYds","Tgt","PassingAtt","RushingAtt","ReceivingTD","RushingTD",
"PassingTD","Teamvariancerushingshare","Teamvariancepassingshare","Teamvariancetargetshare","Rushing_share",
"Passing_share","Tgt_share")
for (i in 1:length(statslist)) {
keep<-c(paste0("Playerroll",numweeks,statslist[i]),paste0("TeamAllowedroll",numweeks,statslist[i]))
sub_train<-train[,keep,with=FALSE]
scale_transform<-preProcess(sub_train, method = c("center","scale"))
scaled_values<-predict(scale_transform, sub_train)
train$value_dif<-scaled_values[,1]-scaled_values[,2]
setnames(train,"value_dif",paste0(statslist[i],"_Dif"))
}
#Read in injurydata data table
injurydata<-fread("./project/volume/data/interim/injuryreports.csv")
#Create new name column to merge on and put everything to lowercase
train$mergeName<-tolower(train$Player)
injurydata$mergeName<-tolower(injurydata$Player)
#Change column name Player in injury data
names(injurydata)[names(injurydata) == 'Player'] <- 'DropName'
#Get rid of all special characters
train$mergeName<-gsub("[-]"," ",train$mergeName)
injurydata$mergeName<-gsub("[-]"," ",injurydata$mergeName)
train$mergeName<-gsub("[.]","",train$mergeName)
injurydata$mergeName<-gsub("[.]","",injurydata$mergeName)
train$mergeName<-gsub("[']","",train$mergeName)
injurydata$mergeName<-gsub("[']","",injurydata$mergeName)
>merge()
?merge()
#Set keys for both datasets
setkey(train,season,week,mergeName)
setkey(injurydata,season,week,mergeName)
finaltrain<-merge(train,injurydata, all.x = TRUE)
#Get rid of columns not of interest
drops<-c("DropName","mergeName")
finaltrain<-finaltrain[, !drops, with = FALSE]
View(finaltrain)
#Write out train set to processed folder
fwrite(finaltrain, path2)
library(data.table)
train<-fread("./project/volume/data/processed/trainroll4.csv")
View(train)
train<-fread("./project/volume/data/processed/trainroll5.csv")
train<-fread("./project/volume/data/processed/trainroll6.csv")
train<-fread("./project/volume/data/processed/trainroll6 2.csv")
rolltime<-"roll4"
pos<-"QB"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
library(optparse)
library(data.table)
train<-fread(path2)
View(train)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
View(param_table)
sample_pos<-pos
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=train1)
x_train<-predict(dummies, newdata = train1)
x_test<-predict(dummies, newdata = test1)
View(test1)
(l <- sapply(test1, function(x) is.factor(x)))
m<- test1[,l]
m<- test1[, l]
l
n <- sapply(m, function(x) length(levels(x)))
m<-test1[, l]
m<-test1[, l=T]
m<-test1[, l==T]
is.factor(train)
(l <- sapply(train, function(x) is.factor(x)))
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
library(optparse)
library(data.table)
rolltime<-"roll4"
pos<-"WR"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
sample_pos<-pos
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
train1$train<-1
test1$train<-0
master<-rbind(train1,test1)
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
x_master<-predict(dummies, newdata = master)
x_train<-x_master[train==1]
x_test<-x_master[train==0]
x_train$train<-NULL
x_test$train<-NULL
x_train<-data.table(x_train)
x_test<-data.table(x_test)
View(x_train)
rolltime<-"roll4"
pos<-"QB"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
sample_pos<-pos
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
train1$train<-1
test1$train<-0
master<-rbind(train1,test1)
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
x_master<-predict(dummies, newdata = master)
x_train<-x_master[train==1]
x_test<-x_master[train==0]
x_train<-data.table(x_train)
x_test<-data.table(x_test)
x_train$train<-NULL
x_test$train<-NULL
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
sample_pos<-pos
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
train1$train<-1
test1$train<-0
master<-rbind(train1,test1)
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
x_master<-predict(dummies, newdata = master)
x_train<-x_master[train==1]
x_test<-x_master[train==0]
#Declare Libraries
library(data.table)
library(caret)
library(optparse)
library(purrr)
library(rvest)
library(stringr)
library(tidyr)
rolltime<-"roll3"
week<-3
print("Running Function 3")
#read in player statistics table
playerstats<-fread("./project/volume/data/interim/gamePlayerstats.csv")
#read in box scores table
boxscores<-fread("./project/volume/data/interim/allBoxscores.csv")
View(boxscores)
#only concerned with stats from 2009 on as the box scores data starts at 2009
playerstats<-playerstats[season>2008]
#Create home and away team tables
home<-boxscores[,.(game_id,home_team,week,season,home_score)]
setnames(home,c("home_team","home_score"),c("Tm","score"))
away<-boxscores[,.(game_id,away_team,week,season,away_score)]
setnames(away,c("away_team","away_score"),c("Tm","score"))
View(away)
View(home)
#Rbind home and away to create allboxscores
allboxscores<-rbind(home,away)
View(allboxscores)
allboxscores<-merge(allboxscores,allboxscores,by=c("game_id","week","season"),allow.cartesian = T)
View(allboxscores)
setnames(allboxscores,c("Tm.x","score.x","Tm.y","score.y"), c("Tm","Tmscore","Opponent","Opponentscore"))
allboxscores<-allboxscores[!Tm==Opponent]
View(boxscores)
?source
#Declare Libraries
library(data.table)
library(caret)
library(optparse)
library(purrr)
library(rvest)
library(stringr)
library(tidyr)
rolltime<-"roll4"
numweeks<-4
print("Running Function 7")
#remove file if it already exists to not override the data
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
path3 <- "./project/volume/data/processed/playerstats"
path4 <- "./project/volume/data/processed/teamstats"
path5 <- paste0(path3,rolltime,".csv")
path6 <- paste0(path4,rolltime,".csv")
playerstats<-fread(path5)
teamstats<-fread(path6)
playerdrops<-c("StandardFantasyPoints","HalfPPRFantasyPoints","Tmscore","Opponentscore","cumulativeweek", "PassingYds",
"PassingTD","Int","PassingAtt","Cmp","RushingAtt","RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL","Tgt_share","Rushing_share","Passing_share","Teamtotalpassingattempts","Teamtotalrushingattempts",
"Teamvariancepassingshare","Teamvariancerushingshare","Teamvariancetargetshare",
paste0("roll",numweeks,"StandardFantasyPoints"), paste0("roll",numweeks,"HalfPPRFantasyPoints"))
teamdrops<-c("PassingYds","PassingTD","Int","PassingAtt","Cmp","RushingAtt","RushingYds","RushingTD","Rec","Tgt","ReceivingYds",
"ReceivingTD","FL","Tgt_share","Rushing_share","Passing_share","Teamtotalpassingattempts","Teamtotalrushingattempts",
"Teamvariancepassingshare","Teamvariancerushingshare","Teamvariancetargetshare", "PPRFantasyPoints",
"StandardFantasyPoints", "HalfPPRFantasyPoints",paste0("roll",numweeks,"StandardFantasyPoints"),
paste0("roll",numweeks,"HalfPPRFantasyPoints"),paste0("roll",numweeks,"PPRFantasyPoints"))
playerstats<-playerstats[,!playerdrops,with = FALSE]
teamstats<-teamstats[,!teamdrops,with=FALSE]
#Set Names
player_roll_names<-names(playerstats)[grep("roll",names(playerstats))]
player_roll_names
names(playerstats)
new_names<-paste0("Player",player_roll_names)
new_names
setnames(teamstats, team_roll_names, new_team_names)
#Set Names
player_roll_names<-names(playerstats)[grep("roll",names(playerstats))]
new_names<-paste0("Player",player_roll_names)
setnames(playerstats, player_roll_names, new_names)
team_roll_names<-names(teamstats)[grep("roll",names(teamstats))]
new_team_names<-paste0("TeamAllowed",team_roll_names)
setnames(teamstats, team_roll_names, new_team_names)
#Set Keys and Merge Together PlayerStats and Teamstats to create train set
setkey(playerstats,season,week,Tm,game_id,Opponent)
setkey(teamstats,season,week,Tm,game_id,Opponent)
train<-merge(playerstats,teamstats)
#make a value list
statslist<- c("ReceivingYds","RushingYds","PassingYds","Tgt","PassingAtt","RushingAtt","ReceivingTD","RushingTD",
"PassingTD","Teamvariancerushingshare","Teamvariancepassingshare","Teamvariancetargetshare","Rushing_share",
"Passing_share","Tgt_share")
i<-1
keep<-c(paste0("Playerroll",numweeks,statslist[i]),paste0("TeamAllowedroll",numweeks,statslist[i]))
keep
sub_train<-train[,keep,with=FALSE]
sub_train
scale_transform<-preProcess(sub_train, method = c("center","scale"))
scaled_values<-predict(scale_transform, sub_train)
train$value_dif<-scaled_values[,1]-scaled_values[,2]
scale_transform<-preProcess(sub_train, method = c("center","scale"))
scaled_values<-predict(scale_transform, sub_train)
scaled_values
train$value_dif<-scaled_values[,1]-scaled_values[,2]
value_dif
train$value_dif
library(Metrics)
library(caret)
library(xgboost)
library(ggplot2)
library(optparse)
library(data.table)
rolltime<-"roll4"
pos<-"QB"
path1<-"./project/volume/data/processed/train"
path2<-paste0(path1,rolltime,".csv")
train<-fread(path2)
#read in hyperparameter data
param_table<-fread("./project/src/models/HyperParams/hyperparametertuning.csv")
sample_pos<-pos
train1<-train[season<2019]
test1<-train[season==2019]
#Prep Data for Modeling
train1_y<-train1$PPRFantasyPoints
test_y<-test1$PPRFantasyPoints
test1$PPRFantasyPoints<-0
#Get rid of columns not needed for modeling
drops<-c("season","Tm","game_id","Opponent","Player","Pos","cumulativeweek")
train1<-train1[, !drops, with = FALSE]
test1<-test1[, !drops, with = FALSE]
train1[train1==""]<-"None"
train1$Wed[is.na(train1$Wed)]<-"None"
train1$Thu[is.na(train1$Thu)]<-"None"
train1$Fri[is.na(train1$Fri)]<-"None"
train1$GameStatus[is.na(train1$GameStatus)]<-"None"
test1$Wed[is.na(test1$Wed)]<-"None"
test1$Thu[is.na(test1$Thu)]<-"None"
test1$Fri[is.na(test1$Fri)]<-"None"
test1$GameStatus[is.na(test1$GameStatus)]<-"None"
test1[test1==""]<-"None"
sampledrops<-c("Wed","Thu","Fri","GameStatus")
train1<-train1[, !sampledrops, with = FALSE]
test1<-test1[, !sampledrops, with = FALSE]
train1$train<-1
test1$train<-0
master<-rbind(train1,test1)
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
x_master<-predict(dummies, newdata = master)
x_train<-x_master[train==1]
x_test<-x_master[train==0]
x_train<-data.table(x_train)
x_test<-data.table(x_test)
x_train$train<-NULL
#Need to keep position in as a variable and create dummies for this purpose
dummies<-dummyVars(PPRFantasyPoints~., data=master)
x_train<-predict(dummies, newdata = train1)
x_test<-predict(dummies, newdata = test1)
x_train<-data.table(x_train)
x_test<-data.table(x_test)
x_train$train<-NULL
x_test$train<-NULL
#Create proper representation of data for modeling
dtrain <- xgb.DMatrix(x_train,label=train1_y,missing=NA)
dtest <- xgb.DMatrix(x_test,label=test_y,missing=NA)
str(master)
summary(master)
table(master)
nearZeroVar(master,saveMetrics = T)
summaryvar<-nearZeroVar(master,saveMetrics = T)
summaryvar
summaryvar<-nearZeroVar(master,saveMetrics = T)
summaryvar<-nearZeroVar(master,saveMetrics = T)
summaryvar<-data.table(summaryvar)
zerovarcols<-summaryvar[zeroVar==T]
View(zerovarcols)
summaryvar<-nearZeroVar(master,saveMetrics = T)
injurycols<-rownames(summaryvar)
summaryvar<-data.table(summaryvar)
summaryvar$columnames<-injurycols
zerovarcols<-summaryvar[zeroVar==T]
View(zerovarcols)
sampledrops<-zerovarcols$columnames
train1<-train1[, !sampledrops, with = FALSE]
test1<-test1[, !sampledrops, with = FALSE]
